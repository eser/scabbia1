riffus: Language'i aman diim sistemin icine dahil etme. Sadece controller'in bilgisi olsun, routing ile halledilebilsin, hatta bunun da opsiyonel olmasinda fayda var
(url scheme'in dil icin nasil olacagini force etmemeli). Zaten ben mesela dile gore ya farkli template'ler gosteriyorum ya da template'te zaten dil yoksa direkt model'den gelen datayi
ona gore template'e yediriyorum. dille ilgili site stringlerini Constant gibi DB'ye koyuyorum ya da bir XML, bir TXT nasil uygunsa. Sonra onu modelden okuyorum. Dolayisiyla modelin o
anki locale'den haberi olmasi lazim ki ben hep ayni datayi view'a (benim icin template) gondereyim fakat model bana uygun sekilde cevirisini yapmis olsun. Zaten model'in de esprisi bu

riffus: Mutlaka file access extension'i olmali diye dusunuyorum. basic seyler, fail proof ve centralized bir sekilde read, exists, read directory islerini yapip bunun
datasini array'e falan atan mesela. Sistemin installation'ini, hangi OS'ta oldugunu ivirini zivirini file extension'i transparent halletmeli ki ben \ / .. absolute pathle ugrasmayayim

riffus: "framework styling" implement edilebilir mi, sakincalari neler, getirileri yeterince cazip olur mu? CORE library disinda (documentation dahil) deployment sonrasi ve/veya
oncesinde class/function vs. isimleri Wordpress'in kullandigi .mo/.po localization mantigina benzer replace edilebilir mi? development surecine zarar verme ihtimali nedir? reversable
olmali MUTLAKA. A developer'i scabbia uzerine insa edilmis projeyi B developer'ina devrettiginde orijinal hale donulebilmeli.

riffus: test suite & default fancyfication! :) test suite icin test db hazirlanmasi.

riffus: documentation'da example'lar, performans verileri (acik olsa teoride %.5 performans hit yasarsin, ac bence faydasi cok) gibi belki color coded perfomans guide.

kusmuk: bu ew sitesini manual olarak maintain etmek sikici oluyor. sayfalari dil seciminine gore otomatik google translate'e sokan ve bunlari ayrica google search results'da yayinlayan bildigin saglam bir CMS var mi?

+ Model-View-Controller Based System
+ Extremely Light Weight
+ Full Featured database classes with support for several platforms.
+ Active Record Database Support
+ Security and XSS Filtering
+ Pagination
+ User Agent Class
+ Template Engine Class
+ Flexible URI Routing
+ Support for Hooks and Class Extensions
+ Large library of "helper" functions
+ Session Management
+ Data Encryption

- Unit Testing Class (unit testing - combine with control extension)
- XML-RPC Library
- Search-engine Friendly URLs (generator: htaccess & webconfig editor)
- Benchmarking
- Error Logging
- Localization
- Form and Data Validation (html extension form, formvalidation, innernotify (olumlu) gibi ozelliklerle gelistirilecek.)
- Trackback Class

* documentation
* output extension (ci)
* i18n, l10n
* admin panel

webpanel (database ve model otomatik olusturma)

* html javascript/css manager (collection) to create <head> tag and details
* facebook, oauth, gravatar helper

* bir databinding turu
* templateengine'lari config'de daha bir item gibi register ettirip, view'larda extension'larin yanisira keylerle cagirabilmeliyiz.
  bunun nedeni partial olarak baska templateenginelar kullanilabilir markdown gibi.
  hatta bir tek bir function ile cagirabilirsek template'i razor icinden @mvc::renderTemplate('documentation.m', 'markdown')
  diyerek markdown template'ini razor'un icinde cagirabiliriz.
* yazilacak javascript extension'unda direkt array'den knockoutjs icin formatlara export olmali.
* MVC extension'unda controller eger model olarak isaretlenmis bir parametre aliyorsa GET veya belirtilen baska bir array'den Model sinifi yorumlanmali ASP.NET'de oldugu gibi.
* MVC uzerinde $this->error gibisinden bir metod bulunacak, bu da config'de tanimli error page'i cagiracak. 404 gibi hatalar da bu error'a gelecek.
* driver extension mantigini bir dusunmek lazim, ayni interfaceleri kullanan bir extension olup yalnizca hangi driver oldugu degisebilir mi diye.

* controller'da private olan metodlara disaridan erisim olmayacak ci'deki '_' gibi.

* build'in ftp secenegi de olacak. config'e girilen optionlar ve ftp bilgileri ile build isleminin ardindan secilen path'e framework'un derlenmis halini atacak.

* query debug ->selectQuery() and framework::$debug
* cache_*, database_* extensions

scabbia:
---------------------------
scabbia models:
- bir class veya array verildiginde otomatik olarak insert/update/delete/select cumlesi calisabilsin.
- $this->db->insert('users', array('userid' => '5', username => 'eser')); gibi

scabbia controllers:
- controllers/home.php controllers/shared.php controllers/developer.php default gelecek.
- bunlar default gelmesine ragmen config'den actionlarla birlikte map edilebilecek. (shared/notfound shared/error home/index)

scabbia developer controller:
- development 1 ise veya ip range/filter tutuyor ise girilebilecek.
- config editlenebilecek.
- model yaratilabilecek.
- model icin entity yaratilabilecek. entity class'lar ayni zamanda constraintleri tutacak, constraintler bizim validator'leri kullanabilir.
- model entity siniflari sayesinde crud islemleri kolayca yapilabilecek.
- extension ekleme cikarma olacak.
- build islemleri yapilabilecek.
- dosya editleme olacak.
