<?php

	class logger {
		private static $filename;
		private static $eof = "\r\n";

		public static function extension_info() {
			return array(
				'name' => 'logger',
				'version' => '1.0.2',
				'phpversion' => '5.1.0',
				'phpdepends' => array(),
				'fwversion' => '1.0',
				'fwdepends' => array('http')
			);
		}

		public static function extension_load() {
			self::$filename = Config::get('/logger/@filename', 'd-m-Y');

			set_exception_handler('logger::exceptionCallback');
			set_error_handler('logger::errorCallback', E_ALL);
			// ini_set('display_errors', '1');
			// ini_set('track_errors', '1');
			// ini_set('html_errors', '0');
		}

		public static function errorCallback($uCode, $uMessage, $uFile, $uLine) {
			throw new ErrorException($uMessage, $uCode, 0, $uFile, $uLine);
		}

		public static function exceptionCallback($uException) {
			switch($uException->getCode()) {
				case E_ERROR:
				case E_USER_ERROR:
				case E_RECOVERABLE_ERROR:
					$tType = 'Error';
					break;
				case E_WARNING:
				case E_USER_WARNING:
					$tType = 'Warning';
					break;
				case E_NOTICE:
				case E_USER_NOTICE:
					$tType = 'Notice';
					break;
				case E_STRICT:
					$tType = 'Strict';
					break;
				// case E_DEPRECATED: // PHP >= 5.3.0
				case 8192:
				// case E_USER_DEPRECATED: // PHP >= 5.3.0
				case 16384:
					$tType = 'Deprecated';
					break;
				default:
					$tType = 'Unknown';
					break;
			}

			$tIgnoreError = false;
			Events::invoke('reportError', array(
				'type' => &$tType,
				'message' => $uException->getMessage(),
				'file' => $uException->getFile(),
				'line' => $uException->getLine(),
				'ignore' => &$tIgnoreError
			));

			if(!$tIgnoreError) {
				http::sendStatus(500);
				http::sendHeader('Content-Type', 'text/html', true);

				Events::setDisabled(true);
				$tEventDepth = Events::getEventDepth();

				for($tCount = ob_get_level(); --$tCount > 1;ob_end_flush());
				
				if(Framework::$development) {
					$tDeveloperLocation = pathinfo($uException->getFile(), PATHINFO_FILENAME) . ' @' . $uException->getLine();
				}
				else {
					$tDeveloperLocation = '';
				}

				$tString = '';
				$tString .= '<div>'; // for content-type: text/xml
				$tString .= '<div style="font: 11pt \'Lucida Sans Unicode\'; color: #000060; border-bottom: 1px solid #C0C0C0; background: #F0F0F0; padding: 8px 12px 8px 12px;"><span style="font-weight: bold;">' . $tType . '</span>: ' . $tDeveloperLocation . '</div>' . self::$eof;
				$tString .= '<div style="font: 10pt \'Lucida Sans Unicode\'; color: #404040; padding: 0px 12px 0px 12px; margin: 20px 0px 20px 0px; line-height: 20px;">' . $uException->getMessage() . '</div>' . self::$eof;

				if(Framework::$development) {
					if(count($tEventDepth) > 0) {
						$tString .= '<div style="font: 10pt \'Lucida Sans Unicode\'; color: #800000; padding: 0px 12px 0px 12px; margin: 20px 0px 20px 0px; line-height: 20px;"><b>eventDepth:</b>' . implode('<br />' . self::$eof, $tEventDepth) . '</div>' . self::$eof;
					}
					
					$tString .= '<div style="font: 10pt \'Lucida Sans Unicode\'; color: #800000; padding: 0px 12px 0px 12px; margin: 20px 0px 20px 0px; line-height: 20px;"><b>stackTrace:</b>' . $uException->getTraceAsString() . '</div>' . self::$eof;
				}

				$tString .= '</div>';

				$tFilename = QPATH_APP . 'logs/' . date(self::$filename) . '.txt';
				// $tContent = date('d-m-Y H:i:s') . self::$eof . strip_tags($tString) . self::$eof;
				$tContent = '[' . date('d-m-Y H:i:s') . '] ' . $uException->__toString() . self::$eof . self::$eof;

				file_put_contents($tFilename, $tContent, FILE_APPEND);

				$tString .= '<div style="font: 7pt \'Lucida Sans Unicode\'; color: #808080; padding: 0px 12px 0px 12px;">Generated by <a href="mailto:laroux.pos@gmail.com">' . ucfirst(INCLUDED) . '</a>.</div>';
				echo $tString;

				exit();
			}
		}
	}

?>