<?php
	ignore_user_abort();
	date_default_timezone_set('UTC');
	setlocale(LC_ALL, 'en_US.UTF-8');
	mb_internal_encoding('UTF-8');
	mb_http_output('UTF-8');

	define('PHP_OS_WINDOWS', true);
	define('PHP_SAPI_CLI', (PHP_SAPI == 'cli'));
	define('QPATH_CORE', 'C:\\inetpub\\wwwroot\\php2\\');
	define('QPATH_APP', 'C:\\inetpub\\wwwroot\\php2\\application\\');
	define('QTIME_INIT', microtime(true));
	define('QEXT_PHP', '.php');

	define('SCABBIA_VERSION', '1.0.15518');
	define('INCLUDED', 'Scabbia 1.0.15518');
	define('COMPILED', true);

	define('OUTPUT_NOHANDLER', true);
	define('OUTPUT_GZIP', true);
	define('OUTPUT_MULTIBYTE', true);
?><?php
 if(!function_exists('fnmatch3')) { function fnmatch3($uPattern, $uString) { for($tBrackets = 0, $tPregPattern = '', $tCount = 0, $tLen = strlen($uPattern); $tCount < $tLen; $tCount++) { $tChar = $uPattern[$tCount]; if(strpbrk($tChar, '\\/-+^$=!.|(){}<>')) { $tPregPattern .= '\\' . $tChar; } else if(strpbrk($tChar, '?*')) { $tPregPattern .= '.' . $tChar; } else { $tPregPattern .= $tChar; if($tChar == '[') { $tBrackets++; } else if($tChar == ']') { if($tBrackets == 0) { return false; } $tBrackets--; } } } if($tBrackets != 0) { return false; } return preg_match('/' . $tPregPattern . '/i', $uString); } } if(!function_exists('glob3')) { function &glob3($uPattern, $uDirectories = true, $uRecursive = false, &$uArray = null) { $tPath = pathinfo($uPattern, PATHINFO_DIRNAME); if(is_null($uArray)) { $uArray = array(); } try { $tDir = new DirectoryIterator($tPath); foreach($tDir as $tFile) { if($tFile->isDot()) { continue; } $tFile2 = $tPath . '/' . $tFile->getFilename(); if($tFile->isDir()) { $tFile2 .= '/'; if($uRecursive) { $tBasename = pathinfo($uPattern, PATHINFO_BASENAME); $tPattern2 = $tFile2 . $tBasename; glob3($tPattern2, $uDirectories, true, $uArray); } } if(!$uDirectories && !$tFile->isFile()) { continue; } if(fnmatch3($uPattern, $tFile2)) { $uArray[] = $tFile2; } } return $uArray; } catch(Exception $tException) { } return false; } } ?>
<?php
 class Config { public static $default = null; public static $development; public static $socket; public static function passScope(&$uNode) { if(isset($uNode['binding']) && !fnmatch((string)$uNode['binding'], self::$socket)) { return false; } if(isset($uNode['mode'])) { if((string)$uNode['mode'] == 'development') { if(!self::$development) { return false; } } else if(self::$development) { return false; } } return true; } public static function processChildrenAsArray($uNode, $uListElement, &$uContents) { $tNodeName = $uNode->getName(); foreach($uNode->children() as $tKey => $tNode) { if($tKey == 'scope') { if(!self::passScope($tNode)) { continue; } self::processChildrenAsArray($tNode, null, $uContents); continue; } if(!is_null($uListElement) && $uListElement == $tKey) { self::processChildrenAsArray($tNode, null, $uContents[]); } else { if(!isset($uContents[$tKey])) { $uContents[$tKey] = array(); } if(substr($tKey, -4) == 'List') { self::processChildrenAsArray($tNode, substr($tKey, 0, -4), $uContents[$tKey]); } else { self::processChildrenAsArray($tNode, null, $uContents[$tKey]); } } } foreach($uNode->attributes() as $tKey => $tValue) { $uContents['@' . $tKey] = (string)$tValue; } $tNodeValue = rtrim((string)$uNode); if(strlen($tNodeValue) > 0) { $uContents['.'] = $tNodeValue; } } public static function processChildren_r(&$uArray, &$uNodes, $uNode) { $tNodeName = $uNode->getName(); if($tNodeName == 'scope') { $tScope = true; if(!self::passScope($uNode)) { return; } } if(!isset($tScope)) { array_push($uNodes, $tNodeName); $tNodePath = '/' . implode('/', array_slice($uNodes, 1)); if(substr($tNodeName, -4) == 'List') { $tListName = substr($tNodeName, 0, -4); } } if(isset($tListName)) { if(!isset($uArray[$tNodePath])) { $uArray[$tNodePath] = array(); } self::processChildrenAsArray($uNode, $tListName, $uArray[$tNodePath]); } else { foreach($uNode->children() as $tKey => $tNode) { self::processChildren_r($uArray, $uNodes, $tNode); } if(!isset($tScope)) { foreach($uNode->attributes() as $tKey => $tValue) { $uArray[$tNodePath . '/@' . $tKey] = (string)$tValue; } $tNodeValue = rtrim((string)$uNode); if(strlen($tNodeValue) > 0) { $uArray[$tNodePath . '/.'] = $tNodeValue; } } } if(!isset($tScope)) { array_pop($uNodes); } } public static function &loadFiles($uFiles) { self::$development = file_exists(QPATH_APP . '/development'); if(isset($_SERVER['SERVER_NAME'])) { self::$socket = $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT']; } else { self::$socket = 'localhost:80'; } $tConfig = array(); $tConfigNodes = array(); foreach(glob3($uFiles, false, true) as $tFilename) { $tXmlDom = simplexml_load_file($tFilename, null, LIBXML_NOBLANKS|LIBXML_NOCDATA) or exit('Unable to read from config file - ' . $tFilename); self::processChildren_r($tConfig, $tConfigNodes, $tXmlDom); } return $tConfig; } public static function load() { self::$default = self::loadFiles(QPATH_APP . 'config/*'); } public static function &get($uKey, $uDefault = null) { if(!array_key_exists($uKey, self::$default)) { return $uDefault; } return self::$default[$uKey]; } public static function set($uVariable) { self::$default = $uVariable; } public static function dump() { var_dump(self::$default); } public static function export() { return var_export(self::$default, true); } } ?>
<?php
 class Events { public static $callbacks = array(); public static $eventDepth = array(); public static $disabled = false; public static function register($uEventName, $uCallback) { if(!array_key_exists($uEventName, self::$callbacks)) { self::$callbacks[$uEventName] = array(); } self::$callbacks[$uEventName][] = $uCallback; } public static function invoke($uEventName, $uEventArgs = array()) { if(self::$disabled) { return; } if(!array_key_exists($uEventName, self::$callbacks)) { return; } foreach(self::$callbacks[$uEventName] as &$tCallback) { if(is_array($tCallback)) { $tCallname = array(get_class($tCallback[0]), $tCallback[1]); } else { $tCallname = array('GLOBALS', $tCallback); } $tKey = $tCallname[0] . '::' . $tCallname[1]; array_push(self::$eventDepth, $tKey . '()'); if(call_user_func($tCallback, $uEventArgs) === false) { break; } array_pop(self::$eventDepth); } } public static function setDisabled($uDisabled) { self::$disabled = $uDisabled; } public static function getEventDepth() { return self::$eventDepth; } public static function Callback($uCallbackMethod, &$uCallbackObject = null) { if(func_num_args() >= 2) { return array(&$uCallbackObject, $uCallbackMethod); } return $uCallbackMethod; } } ?>
<?php
 class Framework { public static $includePaths = array(); public static $downloadUrls = array(); public static $development; public static $debug; public static $siteroot; public static $directCall; public static function translatePath($uPath) { if(substr($uPath, 0, 6) == '{core}') { return QPATH_CORE . substr($uPath, 6); } if(substr($uPath, 0, 5) == '{app}') { return QPATH_APP . substr($uPath, 5); } return $uPath; } public static function load() { self::$development = Config::$development; self::$debug = (bool)Config::get('/options/debug/@value', '0'); self::$siteroot = Config::get('/options/siteroot/@value', ''); self::$directCall = !COMPILED; if(strlen(self::$siteroot) <= 1) { $tLen = strlen($_SERVER['DOCUMENT_ROOT']); if(substr(QPATH_CORE, 0, $tLen) == $_SERVER['DOCUMENT_ROOT']) { self::$siteroot = strtr(substr(QPATH_CORE, $tLen), DIRECTORY_SEPARATOR, '/'); } } self::$siteroot = rtrim(self::$siteroot, '/'); Extensions::init(); if(!COMPILED) { $tDownloads = Config::get('/downloadList', array()); foreach($tDownloads as &$tDownload) { self::$downloadUrls[$tDownload['@filename']] = $tDownload['@url']; } self::downloadFiles(); $tIncludes = Config::get('/includeList', array()); foreach($tIncludes as &$tInclude) { self::$includePaths[] = self::translatePath($tInclude['@path']); } self::includeFilesFromConfig(); } } public static function output($uValue, $uSecond) { $tParms = array( 'content' => &$uValue ); Events::invoke('output', $tParms); if(OUTPUT_MULTIBYTE) { $tParms['content'] = mb_output_handler($tParms['content'], $uSecond); } if(OUTPUT_GZIP && !PHP_SAPI_CLI && Config::get('/options/gzip/@value', '1') != '0') { $tParms['content'] = ob_gzhandler($tParms['content'], $uSecond); } return $tParms['content']; } public static function run() { ob_start('Framework::output'); ob_implicit_flush(false); if(!COMPILED) { if(version_compare(PHP_VERSION, '5.3.6', '>=')) { $tBacktrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS); } else { $tBacktrace = debug_backtrace(false); } foreach($tBacktrace as &$tValue) { if(isset($tValue['function']) && ($tValue['function'] == 'include' || $tValue['function'] == 'require')) { self::$directCall = false; } } if(PHP_SAPI_CLI) { $tParameters = array_slice($_SERVER['argv'], 1); } else { $tParameters = array_keys($_GET); } if(self::$directCall) { if(self::$development && count($tParameters) > 0) { if($tParameters[0] == 'build') { self::build('index.php', !(count($tParameters) >= 2 && $tParameters[1] == 'pseudo')); self::purgeFolder(QPATH_APP . 'writable/sessions'); echo 'build done.'; return; } } exit('why?'); } } } public static function downloadFiles() { foreach(self::$downloadUrls as $tFilename => &$tUrl) { self::downloadFile($tFilename, $tUrl); } } public static function downloadFile($uFile, $uUrl) { $tFilePath = QPATH_APP . 'writable/downloaded/' . $uFile; if(file_exists($tFilePath)) { return false; } $tHandle = fopen($tFilePath, 'w'); $tContent = file_get_contents($uUrl); fwrite($tHandle, $tContent); fclose($tHandle); return true; } private static function includeFilesFromConfig() { foreach(self::$includePaths as &$tPath) { foreach(glob3($tPath, false) as $tFilename) { if(substr($tFilename, -1) == '/') { continue; } require($tFilename); } } } private static function printIncludeFilesFromConfig() { foreach(self::$includePaths as &$tPath) { self::printFiles(glob3($tPath, false)); } } public static function printFiles($uArray) { foreach($uArray as &$tFilename) { if(substr($tFilename, -1) == '/') { continue; } $tContent = php_strip_whitespace($tFilename); $tOpenTags = 0; foreach(token_get_all($tContent) as $tToken) { if($tToken[0] == T_OPEN_TAG || $tToken[0] == T_OPEN_TAG_WITH_ECHO) { $tOpenTags++; } else if($tToken[0] == T_CLOSE_TAG) { $tOpenTags--; } } echo $tContent; for(;$tOpenTags > 0;$tOpenTags--) { echo ' ?', '>'; } } } public static function build($uFilename, $uPseudo = true) { ob_start(); ob_implicit_flush(false); if(self::$development && !$uPseudo) { $tPath = QPATH_CORE . 'framework' . QEXT_PHP; echo '<', '?php
	require(', var_export($tPath), ');
	Extensions::run();
?', '>'; } else { echo '<', '?php
	ignore_user_abort();
	date_default_timezone_set(\'UTC\');
	setlocale(LC_ALL, \'en_US.UTF-8\');
	mb_internal_encoding(\'UTF-8\');
	mb_http_output(\'UTF-8\');

	define(\'PHP_OS_WINDOWS\', ', var_export(PHP_OS_WINDOWS), ');
	define(\'PHP_SAPI_CLI\', (PHP_SAPI == \'cli\'));
	define(\'QPATH_CORE\', ', var_export(QPATH_CORE), ');
	define(\'QPATH_APP\', ', var_export(QPATH_APP), ');
	define(\'QTIME_INIT\', microtime(true));
	define(\'QEXT_PHP\', ', var_export(QEXT_PHP), ');

	define(\'SCABBIA_VERSION\', ', var_export(SCABBIA_VERSION), ');
	define(\'INCLUDED\', ', var_export(INCLUDED), ');
	define(\'COMPILED\', true);

	define(\'OUTPUT_NOHANDLER\', ', var_export(OUTPUT_NOHANDLER), ');
	define(\'OUTPUT_GZIP\', ', var_export(OUTPUT_GZIP), ');
	define(\'OUTPUT_MULTIBYTE\', ', var_export(OUTPUT_MULTIBYTE), ');
?', '>'; echo php_strip_whitespace(QPATH_CORE . 'include/patches.main' . QEXT_PHP); echo php_strip_whitespace(QPATH_CORE . 'include/config.main' . QEXT_PHP); echo php_strip_whitespace(QPATH_CORE . 'include/events.main' . QEXT_PHP); echo php_strip_whitespace(QPATH_CORE . 'include/framework.main' . QEXT_PHP); echo php_strip_whitespace(QPATH_CORE . 'include/extensions.main' . QEXT_PHP); echo '<', '?php Config::set(', Config::export(), '); Framework::load(); ?', '>'; self::printIncludeFilesFromConfig(); echo '<', '?php Extensions::load(); Framework::run(); Extensions::run(); ?', '>'; } $tContents = ob_get_contents(); ob_end_clean(); $tOutput = fopen($uFilename, 'w') or exit('Unable to write to ' . $uFilename); fwrite($tOutput, $tContents); fclose($tOutput); } public static function purgeFolder($uFolder) { foreach(glob3($uFolder . '/*', true) as $tFilename) { if(substr($tFilename, -1) == '/') { continue; } unlink($tFilename); } } } ?>
<?php
 class Extensions { public static $selected = array(); public static $loaded = array(); public static function init() { $tExtensions = Config::get('/extensionList', array()); foreach($tExtensions as &$tExtension) { self::$selected[] = $tExtension['@name']; } } public static function load() { foreach(self::$selected as &$tExtensionName) { self::add($tExtensionName); } } public static function run() { Events::invoke('run', array()); } public static function add($uExtensionName) { if(in_array($uExtensionName, self::$loaded)) { return true; } if(!class_exists($uExtensionName)) { throw new Exception('extension class not loaded - ' . $uExtensionName); } self::$loaded[] = $uExtensionName; $tClassInfo = call_user_func(array($uExtensionName, 'extension_info')); if(!COMPILED) { if(isset($tClassInfo['phpversion']) && version_compare(PHP_VERSION, $tClassInfo['phpversion'], '<')) { return false; } if(isset($tClassInfo['phpdepends'])) { foreach($tClassInfo['phpdepends'] as &$tExtension) { if(!extension_loaded($tExtension)) { throw new Exception('php extension is required - dependency: ' . $tExtension . ' for: ' . $uExtensionName); } } } if(isset($tClassInfo['fwversion']) && version_compare(SCABBIA_VERSION, $tClassInfo['fwversion'], '<')) { return false; } if(isset($tClassInfo['fwdepends'])) { foreach($tClassInfo['fwdepends'] as &$tExtension) { if(!in_array($tExtension, self::$loaded)) { throw new Exception('framework extension is required - dependency: ' . $tExtension . ' for: ' . $uExtensionName); } } } } if(method_exists($uExtensionName, 'extension_load')) { call_user_func(array($uExtensionName, 'extension_load')); } return true; } public static function isSelected($uExtensionName) { return in_array($uExtensionName, self::$selected); } public static function dump() { var_dump(self::$loaded); } public static function getAll() { return self::$loaded; } } ?>
<?php Config::set(array (
  '/databaseList' => 
  array (
    0 => 
    array (
      'cachePath' => 
      array (
        '.' => '{app}writable/datasetCache/',
      ),
      'persistent' => 
      array (
      ),
      'overrideCase' => 
      array (
        '.' => 'natural',
      ),
      'pdoString' => 
      array (
        '.' => 'mysql:host=localhost;dbname=test',
      ),
      'username' => 
      array (
        '.' => 'root',
      ),
      'password' => 
      array (
        '.' => 'passwd',
      ),
      'initCommand' => 
      array (
        '.' => '
					SET NAMES \'utf8\'',
      ),
      '@mode' => 'development',
      '@id' => 'dbconn',
      '@default' => 'default',
      '@keyphase' => 'test',
    ),
  ),
  '/datasetList' => 
  array (
    0 => 
    array (
      '@id' => 'getUsers',
      '@cacheLife' => '60',
      '@parameters' => 'offset,limit',
      '.' => '
			SELECT * FROM users OFFSET {offset} LIMIT {limit}',
    ),
  ),
  '/facebook/name/.' => 'Eser.ozvataf.com',
  '/facebook/APP_ID/.' => '272179149472032',
  '/facebook/APP_SECRET/.' => '7270864c28952b74167c3754eaf10168',
  '/facebook/APP_URL/.' => 'https://apps.facebook.com/eserozvatafcom/',
  '/facebook/APP_REDIRECT_URI/.' => 'https://apps.facebook.com/eserozvatafcom/',
  '/options/debug/@value' => '0',
  '/options/gzip/@value' => '1',
  '/downloadList' => 
  array (
  ),
  '/includeList' => 
  array (
    0 => 
    array (
      '@path' => '{core}include/3rdparty/facebook-php-sdk-3.1.1/src/base_facebook.php',
    ),
    1 => 
    array (
      '@path' => '{core}extensions/*.php',
    ),
    2 => 
    array (
      '@path' => '{app}writable/downloaded/*.php',
    ),
    3 => 
    array (
      '@path' => '{app}controllers/*.php',
    ),
    4 => 
    array (
      '@path' => '{app}models/*.php',
    ),
  ),
  '/extensionList' => 
  array (
    0 => 
    array (
      '@name' => 'string',
    ),
    1 => 
    array (
      '@name' => 'io',
    ),
    2 => 
    array (
      '@name' => 'http',
    ),
    3 => 
    array (
      '@name' => 'access',
    ),
    4 => 
    array (
      '@name' => 'time',
    ),
    5 => 
    array (
      '@name' => 'collections',
    ),
    6 => 
    array (
      '@name' => 'contracts',
    ),
    7 => 
    array (
      '@name' => 'validation',
    ),
    8 => 
    array (
      '@name' => 'unittest',
    ),
    9 => 
    array (
      '@name' => 'database',
    ),
    10 => 
    array (
      '@name' => 'session',
    ),
    11 => 
    array (
      '@name' => 'output',
    ),
    12 => 
    array (
      '@name' => 'repository',
    ),
    13 => 
    array (
      '@name' => 'i8n',
    ),
    14 => 
    array (
      '@name' => 'mvc',
    ),
    15 => 
    array (
      '@name' => 'logger',
    ),
    16 => 
    array (
      '@name' => 'html',
    ),
    17 => 
    array (
      '@name' => 'media',
    ),
    18 => 
    array (
      '@name' => 'viewrenderer_razor',
    ),
    19 => 
    array (
      '@name' => 'viewrenderer_markdown',
    ),
    20 => 
    array (
      '@name' => 'stopwatch',
    ),
    21 => 
    array (
      '@name' => 'fb',
    ),
  ),
  '/i8n/languageList' => 
  array (
    0 => 
    array (
      '@id' => 'tr',
      '.' => 'Turkish',
    ),
    1 => 
    array (
      '@id' => 'en',
      '.' => 'English',
    ),
  ),
  '/logger/@filename' => '{date|\'d-m-Y\'} {@category}.txt',
  '/logger/@line' => '[{date|\'d-m-Y H:i:s\'}] {strtoupper|@category} | {@ip} | {@message}',
  '/media/@cachePath' => '{app}writable/mediaCache',
  '/http/request/@parsingType' => '2',
  '/http/request/@getParameters' => '?&,',
  '/http/request/@getKeys' => '=:',
  '/http/request/@getSeperator' => '/',
  '/http/rewriteList' => 
  array (
    0 => 
    array (
      '@match' => '(\\w+)/contacts',
      '@forward' => 'home/mvc/$1/why',
    ),
  ),
  '/http/userAgents/platformList' => 
  array (
    0 => 
    array (
      '@match' => 'windows|winnt|win95|win98',
      '@name' => 'Windows',
    ),
    1 => 
    array (
      '@match' => 'os x|ppc mac|ppc',
      '@name' => 'MacOS',
    ),
    2 => 
    array (
      '@match' => 'irix|netbsd|freebsd|openbsd|bsdi|unix|sunos|linux|debian|gnu',
      '@name' => 'Unix',
    ),
  ),
  '/http/userAgents/crawlerList' => 
  array (
    0 => 
    array (
      '@type' => 'bot',
      '@match' => 'googlebot|msnbot|slurp|yahoo|askjeeves|fastcrawler|infoseek|lycos',
      '@name' => 'Searchbot',
    ),
    1 => 
    array (
      '@type' => 'browser',
      '@match' => 'Opera',
      '@name' => 'Opera',
    ),
    2 => 
    array (
      '@type' => 'browser',
      '@match' => 'Mozilla|Firefox|Firebird|Phoenix',
      '@name' => 'Firefox',
    ),
    3 => 
    array (
      '@type' => 'browser',
      '@match' => 'MSIE|Internet Explorer',
      '@name' => 'Internet Explorer',
    ),
    4 => 
    array (
      '@type' => 'browser',
      '@match' => 'Flock',
      '@name' => 'Flock',
    ),
    5 => 
    array (
      '@type' => 'browser',
      '@match' => 'Chrome',
      '@name' => 'Chrome',
    ),
    6 => 
    array (
      '@type' => 'browser',
      '@match' => 'Shiira',
      '@name' => 'Shiira',
    ),
    7 => 
    array (
      '@type' => 'browser',
      '@match' => 'Chimera',
      '@name' => 'Chimera',
    ),
    8 => 
    array (
      '@type' => 'browser',
      '@match' => 'Camino',
      '@name' => 'Camino',
    ),
    9 => 
    array (
      '@type' => 'browser',
      '@match' => 'Netscape',
      '@name' => 'Netscape',
    ),
    10 => 
    array (
      '@type' => 'browser',
      '@match' => 'OmniWeb',
      '@name' => 'OmniWeb',
    ),
    11 => 
    array (
      '@type' => 'browser',
      '@match' => 'Safari',
      '@name' => 'Safari',
    ),
    12 => 
    array (
      '@type' => 'browser',
      '@match' => 'Konqueror',
      '@name' => 'Konqueror',
    ),
    13 => 
    array (
      '@type' => 'browser',
      '@match' => 'icab',
      '@name' => 'iCab',
    ),
    14 => 
    array (
      '@type' => 'browser',
      '@match' => 'Lynx',
      '@name' => 'Lynx',
    ),
    15 => 
    array (
      '@type' => 'browser',
      '@match' => 'Links',
      '@name' => 'Links',
    ),
    16 => 
    array (
      '@type' => 'browser',
      '@match' => 'hotjava',
      '@name' => 'HotJava',
    ),
    17 => 
    array (
      '@type' => 'browser',
      '@match' => 'amaya',
      '@name' => 'Amaya',
    ),
    18 => 
    array (
      '@type' => 'browser',
      '@match' => 'IBrowse',
      '@name' => 'IBrowse',
    ),
    19 => 
    array (
      '@type' => 'mobile',
      '@match' => 'palm|elaine',
      '@name' => 'Palm',
    ),
    20 => 
    array (
      '@type' => 'mobile',
      '@match' => 'iphone|ipod',
      '@name' => 'iOS',
    ),
    21 => 
    array (
      '@type' => 'mobile',
      '@match' => 'blackberry',
      '@name' => 'Blackberry',
    ),
    22 => 
    array (
      '@type' => 'mobile',
      '@match' => 'symbian|series60',
      '@name' => 'SymbianOS',
    ),
    23 => 
    array (
      '@type' => 'mobile',
      '@match' => 'windows ce',
      '@name' => 'Windows CE',
    ),
    24 => 
    array (
      '@type' => 'mobile',
      '@match' => 'opera mini|operamini',
      '@name' => 'Opera Mini',
    ),
    25 => 
    array (
      '@type' => 'mobile',
      '@match' => 'mobile|wireless|j2me|phone',
      '@name' => 'Other Mobile',
    ),
  ),
  '/http/userAgents/@autoCheck' => '1',
  '/session/cookie/@name' => 'sessid',
  '/session/cookie/@life' => '0',
  '/session/cookie/@ipCheck' => '0',
  '/session/cookie/@uaCheck' => '1',
  '/session/cookie/@keyphase' => 'test',
  '/access/maintenance/@mode' => '0',
  '/access/maintenance/@page' => '{app}views/static_maintenance.php',
  '/access/maintenanceExcludeList' => 
  array (
    0 => 
    array (
      '@ip' => '127.0.0.1',
    ),
  ),
  '/access/ipFilter/@page' => '{app}views/static_ipban.php',
  '/access/ipFilterList' => 
  array (
    0 => 
    array (
      '@type' => 'allow',
      '@pattern' => '*.*.*.*',
    ),
  ),
  '/mvc/routing/@defaultController' => 'home',
  '/mvc/routing/@defaultAction' => 'index',
  '/mvc/routing/@notfoundController' => 'home',
  '/mvc/routing/@notfoundAction' => 'notfound',
  '/mvc/routing/@controllerUrlKey' => '0',
  '/mvc/routing/@actionUrlKey' => '1',
  '/mvc/view/@namePattern' => '{@controller}_{@action}{@extension}',
  '/mvc/view/@defaultExtension' => '.cshtml',
  '/mvc/@autorun' => '1',
  '/repository/routing/@repositoryCheckUrlKey' => '0',
  '/repository/routing/@repositoryCheckUrlValue' => 'repository',
  '/repository/routing/@repositoryPackageUrlKey' => '1',
  '/repository/packageList' => 
  array (
  ),
  '/razor/templates/@extension' => '.cshtml',
  '/razor/templates/@templatePath' => '{app}views',
  '/razor/templates/@compiledPath' => '{app}writable/compiledViews',
  '/phptal/installation/@path' => '{core}include/3rdparty/PHPTAL-1.2.2',
  '/phptal/templates/@extension' => '.zpt',
  '/phptal/templates/@templatePath' => '{app}views',
  '/phptal/templates/@compiledPath' => '{app}writable/compiledViews',
  '/smarty/installation/@path' => '{core}include/3rdparty/Smarty-3.1.7/libs',
  '/smarty/templates/@extension' => '.tpl',
  '/smarty/templates/@templatePath' => '{app}views',
  '/smarty/templates/@compiledPath' => '{app}writable/compiledViews',
  '/raintpl/installation/@path' => '{core}include/3rdparty/raintpl-v.2.7.1.2-0/inc',
  '/raintpl/templates/@extension' => '.rain',
  '/raintpl/templates/@templatePath' => '{app}views',
  '/raintpl/templates/@compiledPath' => '{app}writable/compiledViews',
  '/twig/installation/@path' => '{core}include/3rdparty/Twig-v1.6.0-0/lib/Twig',
  '/twig/templates/@extension' => '.twig',
  '/twig/templates/@templatePath' => '{app}views',
  '/twig/templates/@compiledPath' => '{app}writable/compiledViews',
  '/markdown/templates/@extension' => '.md',
  '/markdown/templates/@templatePath' => '{app}views',
  '/markdown/templates/@compiledPath' => '{app}writable/compiledViews',
  '/php/templates/@extension' => '.php',
  '/php/templates/@templatePath' => '{app}views',
)); Framework::load(); ?><?php
 if (!function_exists('curl_init')) { throw new Exception('Facebook needs the CURL PHP extension.'); } if (!function_exists('json_decode')) { throw new Exception('Facebook needs the JSON PHP extension.'); } class FacebookApiException extends Exception { protected $result; public function __construct($result) { $this->result = $result; $code = isset($result['error_code']) ? $result['error_code'] : 0; if (isset($result['error_description'])) { $msg = $result['error_description']; } else if (isset($result['error']) && is_array($result['error'])) { $msg = $result['error']['message']; } else if (isset($result['error_msg'])) { $msg = $result['error_msg']; } else { $msg = 'Unknown Error. Check getResult()'; } parent::__construct($msg, $code); } public function getResult() { return $this->result; } public function getType() { if (isset($this->result['error'])) { $error = $this->result['error']; if (is_string($error)) { return $error; } else if (is_array($error)) { if (isset($error['type'])) { return $error['type']; } } } return 'Exception'; } public function __toString() { $str = $this->getType() . ': '; if ($this->code != 0) { $str .= $this->code . ': '; } return $str . $this->message; } } abstract class BaseFacebook { const VERSION = '3.1.1'; public static $CURL_OPTS = array( CURLOPT_CONNECTTIMEOUT => 10, CURLOPT_RETURNTRANSFER => true, CURLOPT_TIMEOUT => 60, CURLOPT_USERAGENT => 'facebook-php-3.1', ); protected static $DROP_QUERY_PARAMS = array( 'code', 'state', 'signed_request', ); public static $DOMAIN_MAP = array( 'api' => 'https://api.facebook.com/', 'api_video' => 'https://api-video.facebook.com/', 'api_read' => 'https://api-read.facebook.com/', 'graph' => 'https://graph.facebook.com/', 'graph_video' => 'https://graph-video.facebook.com/', 'www' => 'https://www.facebook.com/', ); protected $appId; protected $appSecret; protected $user; protected $signedRequest; protected $state; protected $accessToken = null; protected $fileUploadSupport = false; public function __construct($config) { $this->setAppId($config['appId']); $this->setAppSecret($config['secret']); if (isset($config['fileUpload'])) { $this->setFileUploadSupport($config['fileUpload']); } $state = $this->getPersistentData('state'); if (!empty($state)) { $this->state = $this->getPersistentData('state'); } } public function setAppId($appId) { $this->appId = $appId; return $this; } public function getAppId() { return $this->appId; } public function setApiSecret($apiSecret) { $this->setAppSecret($apiSecret); return $this; } public function setAppSecret($appSecret) { $this->appSecret = $appSecret; return $this; } public function getApiSecret() { return $this->getAppSecret(); } public function getAppSecret() { return $this->appSecret; } public function setFileUploadSupport($fileUploadSupport) { $this->fileUploadSupport = $fileUploadSupport; return $this; } public function getFileUploadSupport() { return $this->fileUploadSupport; } public function useFileUploadSupport() { return $this->getFileUploadSupport(); } public function setAccessToken($access_token) { $this->accessToken = $access_token; return $this; } public function getAccessToken() { if ($this->accessToken !== null) { return $this->accessToken; } $this->setAccessToken($this->getApplicationAccessToken()); $user_access_token = $this->getUserAccessToken(); if ($user_access_token) { $this->setAccessToken($user_access_token); } return $this->accessToken; } protected function getUserAccessToken() { $signed_request = $this->getSignedRequest(); if ($signed_request) { if (array_key_exists('oauth_token', $signed_request)) { $access_token = $signed_request['oauth_token']; $this->setPersistentData('access_token', $access_token); return $access_token; } if (array_key_exists('code', $signed_request)) { $code = $signed_request['code']; $access_token = $this->getAccessTokenFromCode($code, ''); if ($access_token) { $this->setPersistentData('code', $code); $this->setPersistentData('access_token', $access_token); return $access_token; } } $this->clearAllPersistentData(); return false; } $code = $this->getCode(); if ($code && $code != $this->getPersistentData('code')) { $access_token = $this->getAccessTokenFromCode($code); if ($access_token) { $this->setPersistentData('code', $code); $this->setPersistentData('access_token', $access_token); return $access_token; } $this->clearAllPersistentData(); return false; } return $this->getPersistentData('access_token'); } public function getSignedRequest() { if (!$this->signedRequest) { if (isset($_REQUEST['signed_request'])) { $this->signedRequest = $this->parseSignedRequest( $_REQUEST['signed_request']); } else if (isset($_COOKIE[$this->getSignedRequestCookieName()])) { $this->signedRequest = $this->parseSignedRequest( $_COOKIE[$this->getSignedRequestCookieName()]); } } return $this->signedRequest; } public function getUser() { if ($this->user !== null) { return $this->user; } return $this->user = $this->getUserFromAvailableData(); } protected function getUserFromAvailableData() { $signed_request = $this->getSignedRequest(); if ($signed_request) { if (array_key_exists('user_id', $signed_request)) { $user = $signed_request['user_id']; $this->setPersistentData('user_id', $signed_request['user_id']); return $user; } $this->clearAllPersistentData(); return 0; } $user = $this->getPersistentData('user_id', $default = 0); $persisted_access_token = $this->getPersistentData('access_token'); $access_token = $this->getAccessToken(); if ($access_token && $access_token != $this->getApplicationAccessToken() && !($user && $persisted_access_token == $access_token)) { $user = $this->getUserFromAccessToken(); if ($user) { $this->setPersistentData('user_id', $user); } else { $this->clearAllPersistentData(); } } return $user; } public function getLoginUrl($params=array()) { $this->establishCSRFTokenState(); $currentUrl = $this->getCurrentUrl(); $scopeParams = isset($params['scope']) ? $params['scope'] : null; if ($scopeParams && is_array($scopeParams)) { $params['scope'] = implode(',', $scopeParams); } return $this->getUrl( 'www', 'dialog/oauth', array_merge(array( 'client_id' => $this->getAppId(), 'redirect_uri' => $currentUrl, 'state' => $this->state), $params)); } public function getLogoutUrl($params=array()) { return $this->getUrl( 'www', 'logout.php', array_merge(array( 'next' => $this->getCurrentUrl(), 'access_token' => $this->getAccessToken(), ), $params) ); } public function getLoginStatusUrl($params=array()) { return $this->getUrl( 'www', 'extern/login_status.php', array_merge(array( 'api_key' => $this->getAppId(), 'no_session' => $this->getCurrentUrl(), 'no_user' => $this->getCurrentUrl(), 'ok_session' => $this->getCurrentUrl(), 'session_version' => 3, ), $params) ); } public function api() { $args = func_get_args(); if (is_array($args[0])) { return $this->_restserver($args[0]); } else { return call_user_func_array(array($this, '_graph'), $args); } } protected function getSignedRequestCookieName() { return 'fbsr_'.$this->getAppId(); } protected function getMetadataCookieName() { return 'fbm_'.$this->getAppId(); } protected function getCode() { if (isset($_REQUEST['code'])) { if ($this->state !== null && isset($_REQUEST['state']) && $this->state === $_REQUEST['state']) { $this->state = null; $this->clearPersistentData('state'); return $_REQUEST['code']; } else { self::errorLog('CSRF state token does not match one provided.'); return false; } } return false; } protected function getUserFromAccessToken() { try { $user_info = $this->api('/me'); return $user_info['id']; } catch (FacebookApiException $e) { return 0; } } protected function getApplicationAccessToken() { return $this->appId.'|'.$this->appSecret; } protected function establishCSRFTokenState() { if ($this->state === null) { $this->state = md5(uniqid(mt_rand(), true)); $this->setPersistentData('state', $this->state); } } protected function getAccessTokenFromCode($code, $redirect_uri = null) { if (empty($code)) { return false; } if ($redirect_uri === null) { $redirect_uri = $this->getCurrentUrl(); } try { $access_token_response = $this->_oauthRequest( $this->getUrl('graph', '/oauth/access_token'), $params = array('client_id' => $this->getAppId(), 'client_secret' => $this->getAppSecret(), 'redirect_uri' => $redirect_uri, 'code' => $code)); } catch (FacebookApiException $e) { return false; } if (empty($access_token_response)) { return false; } $response_params = array(); parse_str($access_token_response, $response_params); if (!isset($response_params['access_token'])) { return false; } return $response_params['access_token']; } protected function _restserver($params) { $params['api_key'] = $this->getAppId(); $params['format'] = 'json-strings'; $result = json_decode($this->_oauthRequest( $this->getApiUrl($params['method']), $params ), true); if (is_array($result) && isset($result['error_code'])) { $this->throwAPIException($result); } if ($params['method'] === 'auth.expireSession' || $params['method'] === 'auth.revokeAuthorization') { $this->destroySession(); } return $result; } protected function isVideoPost($path, $method = 'GET') { if ($method == 'POST' && preg_match("/^(\/)(.+)(\/)(videos)$/", $path)) { return true; } return false; } protected function _graph($path, $method = 'GET', $params = array()) { if (is_array($method) && empty($params)) { $params = $method; $method = 'GET'; } $params['method'] = $method; if ($this->isVideoPost($path, $method)) { $domainKey = 'graph_video'; } else { $domainKey = 'graph'; } $result = json_decode($this->_oauthRequest( $this->getUrl($domainKey, $path), $params ), true); if (is_array($result) && isset($result['error'])) { $this->throwAPIException($result); } return $result; } protected function _oauthRequest($url, $params) { if (!isset($params['access_token'])) { $params['access_token'] = $this->getAccessToken(); } foreach ($params as $key => $value) { if (!is_string($value)) { $params[$key] = json_encode($value); } } return $this->makeRequest($url, $params); } protected function makeRequest($url, $params, $ch=null) { if (!$ch) { $ch = curl_init(); } $opts = self::$CURL_OPTS; if ($this->getFileUploadSupport()) { $opts[CURLOPT_POSTFIELDS] = $params; } else { $opts[CURLOPT_POSTFIELDS] = http_build_query($params, null, '&'); } $opts[CURLOPT_URL] = $url; if (isset($opts[CURLOPT_HTTPHEADER])) { $existing_headers = $opts[CURLOPT_HTTPHEADER]; $existing_headers[] = 'Expect:'; $opts[CURLOPT_HTTPHEADER] = $existing_headers; } else { $opts[CURLOPT_HTTPHEADER] = array('Expect:'); } curl_setopt_array($ch, $opts); $result = curl_exec($ch); if (curl_errno($ch) == 60) { self::errorLog('Invalid or no certificate authority found, '. 'using bundled information'); curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/fb_ca_chain_bundle.crt'); $result = curl_exec($ch); } if ($result === false) { $e = new FacebookApiException(array( 'error_code' => curl_errno($ch), 'error' => array( 'message' => curl_error($ch), 'type' => 'CurlException', ), )); curl_close($ch); throw $e; } curl_close($ch); return $result; } protected function parseSignedRequest($signed_request) { list($encoded_sig, $payload) = explode('.', $signed_request, 2); $sig = self::base64UrlDecode($encoded_sig); $data = json_decode(self::base64UrlDecode($payload), true); if (strtoupper($data['algorithm']) !== 'HMAC-SHA256') { self::errorLog('Unknown algorithm. Expected HMAC-SHA256'); return null; } $expected_sig = hash_hmac('sha256', $payload, $this->getAppSecret(), $raw = true); if ($sig !== $expected_sig) { self::errorLog('Bad Signed JSON signature!'); return null; } return $data; } protected function getApiUrl($method) { static $READ_ONLY_CALLS = array('admin.getallocation' => 1, 'admin.getappproperties' => 1, 'admin.getbannedusers' => 1, 'admin.getlivestreamvialink' => 1, 'admin.getmetrics' => 1, 'admin.getrestrictioninfo' => 1, 'application.getpublicinfo' => 1, 'auth.getapppublickey' => 1, 'auth.getsession' => 1, 'auth.getsignedpublicsessiondata' => 1, 'comments.get' => 1, 'connect.getunconnectedfriendscount' => 1, 'dashboard.getactivity' => 1, 'dashboard.getcount' => 1, 'dashboard.getglobalnews' => 1, 'dashboard.getnews' => 1, 'dashboard.multigetcount' => 1, 'dashboard.multigetnews' => 1, 'data.getcookies' => 1, 'events.get' => 1, 'events.getmembers' => 1, 'fbml.getcustomtags' => 1, 'feed.getappfriendstories' => 1, 'feed.getregisteredtemplatebundlebyid' => 1, 'feed.getregisteredtemplatebundles' => 1, 'fql.multiquery' => 1, 'fql.query' => 1, 'friends.arefriends' => 1, 'friends.get' => 1, 'friends.getappusers' => 1, 'friends.getlists' => 1, 'friends.getmutualfriends' => 1, 'gifts.get' => 1, 'groups.get' => 1, 'groups.getmembers' => 1, 'intl.gettranslations' => 1, 'links.get' => 1, 'notes.get' => 1, 'notifications.get' => 1, 'pages.getinfo' => 1, 'pages.isadmin' => 1, 'pages.isappadded' => 1, 'pages.isfan' => 1, 'permissions.checkavailableapiaccess' => 1, 'permissions.checkgrantedapiaccess' => 1, 'photos.get' => 1, 'photos.getalbums' => 1, 'photos.gettags' => 1, 'profile.getinfo' => 1, 'profile.getinfooptions' => 1, 'stream.get' => 1, 'stream.getcomments' => 1, 'stream.getfilters' => 1, 'users.getinfo' => 1, 'users.getloggedinuser' => 1, 'users.getstandardinfo' => 1, 'users.hasapppermission' => 1, 'users.isappuser' => 1, 'users.isverified' => 1, 'video.getuploadlimits' => 1); $name = 'api'; if (isset($READ_ONLY_CALLS[strtolower($method)])) { $name = 'api_read'; } else if (strtolower($method) == 'video.upload') { $name = 'api_video'; } return self::getUrl($name, 'restserver.php'); } protected function getUrl($name, $path='', $params=array()) { $url = self::$DOMAIN_MAP[$name]; if ($path) { if ($path[0] === '/') { $path = substr($path, 1); } $url .= $path; } if ($params) { $url .= '?' . http_build_query($params, null, '&'); } return $url; } protected function getCurrentUrl() { if (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on' || $_SERVER['HTTPS'] == 1) || isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') { $protocol = 'https://'; } else { $protocol = 'http://'; } $currentUrl = $protocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; $parts = parse_url($currentUrl); $query = ''; if (!empty($parts['query'])) { $params = explode('&', $parts['query']); $retained_params = array(); foreach ($params as $param) { if ($this->shouldRetainParam($param)) { $retained_params[] = $param; } } if (!empty($retained_params)) { $query = '?'.implode($retained_params, '&'); } } $port = isset($parts['port']) && (($protocol === 'http://' && $parts['port'] !== 80) || ($protocol === 'https://' && $parts['port'] !== 443)) ? ':' . $parts['port'] : ''; return $protocol . $parts['host'] . $port . $parts['path'] . $query; } protected function shouldRetainParam($param) { foreach (self::$DROP_QUERY_PARAMS as $drop_query_param) { if (strpos($param, $drop_query_param.'=') === 0) { return false; } } return true; } protected function throwAPIException($result) { $e = new FacebookApiException($result); switch ($e->getType()) { case 'OAuthException': case 'invalid_token': case 'Exception': $message = $e->getMessage(); if ((strpos($message, 'Error validating access token') !== false) || (strpos($message, 'Invalid OAuth access token') !== false) || (strpos($message, 'An active access token must be used') !== false) ) { $this->destroySession(); } break; } throw $e; } protected static function errorLog($msg) { if (php_sapi_name() != 'cli') { error_log($msg); } } protected static function base64UrlDecode($input) { return base64_decode(strtr($input, '-_', '+/')); } public function destroySession() { $this->accessToken = null; $this->signedRequest = null; $this->user = null; $this->clearAllPersistentData(); $cookie_name = $this->getSignedRequestCookieName(); if (array_key_exists($cookie_name, $_COOKIE)) { unset($_COOKIE[$cookie_name]); if (!headers_sent()) { $base_domain = '.'. $_SERVER['HTTP_HOST']; $metadata = $this->getMetadataCookie(); if (array_key_exists('base_domain', $metadata) && !empty($metadata['base_domain'])) { $base_domain = $metadata['base_domain']; } setcookie($cookie_name, '', 0, '/', $base_domain); } else { self::errorLog( 'There exists a cookie that we wanted to clear that we couldn\'t '. 'clear because headers was already sent. Make sure to do the first '. 'API call before outputing anything' ); } } } protected function getMetadataCookie() { $cookie_name = $this->getMetadataCookieName(); if (!array_key_exists($cookie_name, $_COOKIE)) { return array(); } $cookie_value = trim($_COOKIE[$cookie_name], '"'); if (empty($cookie_value)) { return array(); } $parts = explode('&', $cookie_value); $metadata = array(); foreach ($parts as $part) { $pair = explode('=', $part, 2); if (!empty($pair[0])) { $metadata[urldecode($pair[0])] = (count($pair) > 1) ? urldecode($pair[1]) : ''; } } return $metadata; } abstract protected function setPersistentData($key, $value); abstract protected function getPersistentData($key, $default = false); abstract protected function clearPersistentData($key); abstract protected function clearAllPersistentData(); }  ?><?php
 if(Extensions::isSelected('access')) { class access { public static $maintenance = 0; public static $maintenanceExcludeIps = array(); public static $ipFilters = array(); public static function extension_info() { return array( 'name' => 'access', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('http') ); } public static function extension_load() { Events::register('run', Events::Callback('access::run')); self::$maintenance = intval(Config::get('/access/maintenance/@mode', '0')) > 0; foreach(Config::get('/access/maintenanceExcludeList', array()) as $tMaintenanceExcludeIp) { self::$maintenanceExcludeIps[] = $tMaintenanceExcludeIp['@ip']; } foreach(Config::get('/access/ipFilterList', array()) as $tIpFilterList) { if(preg_match('/^' . str_replace(array('.', '*', '?'), array('\\.', '[0-9]{1,3}', '[0-9]{1}'), $tIpFilterList['@pattern']) . '$/i', $_SERVER['REMOTE_ADDR'])) { if($tIpFilterList['@type'] == 'allow') { self::$ipFilters = array(); continue; } self::$ipFilters[] = $tIpFilterList['@pattern']; } } } public static function run() { if(self::$maintenance && !in_array($_SERVER['REMOTE_ADDR'], self::$maintenanceExcludeIps)) { $tFile = Framework::translatePath(Config::get('/access/maintenance/@page')); include($tFile); return false; } if(count(self::$ipFilters) > 0) { $tFile = Framework::translatePath(Config::get('/access/ipFilter/@page')); include($tFile); return false; } } } } ?>
<?php
 if(Extensions::isSelected('collections')) { class collections { public static function extension_info() { return array( 'name' => 'collections', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } } class Collection implements ArrayAccess, IteratorAggregate { public $id; public $tag; public function __construct($tArray = null) { $this->id = null; $this->tag = array(); $this->tag['items'] = is_array($tArray) ? $tArray : array(); $this->tag['class'] = get_class($this); } public function add($uItem) { $this->tag['items'][] = $uItem; } public function addKey($uKey, $uItem) { $this->tag['items'][$uKey] = $uItem; } public function addRange($uItems) { foreach($uItems as &$tItem) { $this->add($tItem); } } public function addKeyRange($uItems) { foreach($uItems as $tKey => &$tItem) { $this->addKey($tKey, $tItem); } } public function keyExists($uKey, $uNullValue = true) { if($uNullValue) { return array_key_exists($uKey, $this->tag['items']); } return isset($this->tag['items'][$uKey]); } public function contains($uItem) { foreach($this->tag['items'] as &$tItem) { if($uItem == $tItem) { return true; } } return false; } public function count($uItem = null) { if(!isset($uItem)) { return count($this->tag['items']); } $tCounted = 0; foreach($this->tag['items'] as &$tItem) { if($uItem != $tItem) { continue; } $tCounted++; } return $tCounted; } public function countRange($uItems) { $tCounted = 0; foreach($uItems as &$tItem) { $tCounted += $this->count($tItem); } return $tCounted; } public function remove($uItem, $uLimit = null) { $tRemoved = 0; foreach($this->tag['items'] as $tKey => &$tVal) { if($uItem != $tVal) { continue; } $tRemoved++; unset($this->tag['items'][$tKey]); if(isset($uLimit) && $uLimit >= $tRemoved) { break; } } return $tRemoved; } public function removeRange($uItems, $uLimitEach = null, $uLimitTotal = null) { $tRemoved = 0; foreach($uItems as &$tItem) { $tRemoved += $this->remove($tItem, $uLimitEach); if(isset($uLimitTotal) && $uLimitTotal >= $tRemoved) { break; } } return $tRemoved; } public function removeKey($uKey) { if(!$this->keyExists($uKey, true)) { return 0; } unset($this->tag['items'][$uKey]); return 1; } public function removeIndex($uIndex) { if($this->count < $uIndex) { return 0; } reset($this->tag['items']); for($i = 0;$i < $uIndex;$i++) { next($this->tag['items']); } unset($this->tag['items'][key($this->tag['items'])]); return 1; } public function chunk($uSize, $uPreserveKeys = false) { $tArray = array_chunk($this->tag['items'], $uSize, $uPreserveKeys); return new $this->tag['class'] ($tArray); } public function combineKeys($uArray) { if(is_subclass_of($uArray, 'Collection')) { $uArray = $uArray->toArrayRef(); } $tArray = array_combine($uArray, $this->tag['items']); return new $this->tag['class'] ($tArray); } public function combineValues($uArray) { if(is_subclass_of($uArray, 'Collection')) { $uArray = $uArray->toArrayRef(); } $tArray = array_combine($this->tag['items'], $uArray); return new $this->tag['class'] ($tArray); } public function countValues() { $tArray = array_count_values($this->tag['items']); return new $this->tag['class'] ($tArray); } public function diff() { $uParms = array(&$this->tag['items']); foreach(func_get_args() as $tItem) { if(is_subclass_of($tItem, 'Collection')) { $uParms[] = $tItem->toArrayRef(); } else { $uParms[] = $tItem; } } $tArray = call_user_func_array('array_diff', $uParms); return new $this->tag['class'] ($tArray); } public function filter($uCallback) { $tArray = array_filter($this->tag['items'], $uCallback); return new $this->tag['class'] ($tArray); } public function flip() { $tArray = array_flip($this->tag['items']); return new $this->tag['class'] ($tArray); } public function intersect() { $uParms = array(&$this->tag['items']); foreach(func_get_args() as $tItem) { if(is_subclass_of($tItem, 'Collection')) { $uParms[] = $tItem->toArrayRef(); } else { $uParms[] = $tItem; } } $tArray = call_user_func_array('array_intersect', $uParms); return new $this->tag['class'] ($tArray); } public function keys() { $tArray = array_keys($this->tag['items']); return new $this->tag['class'] ($tArray); } public function map($uCallback) { $tArray = array_map($uCallback, $this->tag['items']); return new $this->tag['class'] ($tArray); } public function mergeRecursive() { $uParms = array(&$this->tag['items']); foreach(func_get_args() as $tItem) { if(is_subclass_of($tItem, 'Collection')) { $uParms[] = $tItem->toArrayRef(); } else { $uParms[] = $tItem; } } $tArray = call_user_func_array('array_merge_recursive', $uParms); return new $this->tag['class'] ($tArray); } public function merge() { $uParms = array(&$this->tag['items']); foreach(func_get_args() as $tItem) { if(is_subclass_of($tItem, 'Collection')) { $uParms[] = $tItem->toArrayRef(); } else { $uParms[] = $tItem; } } $tArray = call_user_func_array('array_merge', $uParms); return new $this->tag['class'] ($tArray); } public function pad($uSize, $uValue) { $tArray = array_pad($this->tag['items'], $uSize, $uValue); return new $this->tag['class'] ($tArray); } public function pop() { return array_pop($this->tag['items']); } public function product() { return array_product($this->tag['items']); } public function push() { $uParms = array(&$this->tag['items']); foreach(func_get_args() as $tItem) { $uParms[] = $tItem; } return call_user_func_array('array_push', $uParms); } public function first() { reset($this->tag['items']); return $this->current(); } public function last() { return end($this->tag['items']); } public function current() { $tValue = current($this->tag['items']); if($tValue === false) { return null; } return $tValue; } public function next() { $tValue = $this->current(); next($this->tag['items']); return $tValue; } public function clear() { $this->tag['items'] = array(); } public function offsetExists($uId) { return $this->keyExists($uId); } public function offsetGet($uId) { return $this->tag['items'][$uId]; } public function offsetSet($uId, $uValue) { $this->tag['items'][$uId] = $uValue; } public function offsetUnset($uId) { $this->removeKey($uId); } public function getIterator() { return new ArrayIterator($this->tag['items']); } public function toCollection() { return new Collection($this->tag['items']); } public function toArray() { return $this->tag['items']; } public function &toArrayRef() { return $this->tag['items']; } public function toString($uSeperator = '') { return implode($uSeperator, $this->tag['items']); } } class XmlCollection extends Collection { public static function fromString($uString) { $tTemp = new XmlCollection(); $tTemp->add(simplexml_load_string($uString)); return $tTemp; } public static function fromFile($uFile) { $tTemp = new XmlCollection(); $tTemp->add(simplexml_load_file($uFile)); return $tTemp; } public static function fromFiles() { $uFiles = func_get_args(); if(is_array($uFiles[0])) { $uFiles = $uFiles[0]; } $tTemp = new XmlCollection(); foreach($uFiles as &$tFile) { $tTemp->add(simplexml_load_file($tFile)); } return $tTemp; } public static function fromFileScan($uPattern) { $tSep = quotemeta(DIRECTORY_SEPARATOR); $tPos = strrpos($uPattern, $tSep); if($tSep != '/' && $tPos === false) { $tSep = '/'; $tPos = strrpos($uPattern, $tSep); } if($tPos !== false) { $tPattern = substr($uPattern, $tPos + strlen($tSep)); $tPath = substr($uPattern, 0, $tPos + strlen($tSep)); } else { $tPath = $uPattern; $tPattern = ''; } $tTemp = new XmlCollection(); $tHandle = new DirectoryIterator($tPath); $tPatExists = (strlen($uPattern) > 0); for(;$tHandle->valid();$tHandle->next()) { if(!($tHandle->isFile())) { continue; } $tFile = $tHandle->current(); if($tPatExists && !fnmatch($tPattern, $tFile)) { continue; } $tTemp->add(simplexml_load_file($tPath . $tFile)); } return $tTemp; } public static function fromSimplexml($uObject) { $tTemp = new XmlCollection(); $tTemp->add($uObject); return $tTemp; } public static function fromDom($uDom) { $tTemp = new XmlCollection(); $tTemp->add(simplexml_import_dom($uDom)); return $tTemp; } } class FileCollection extends Collection { public static function fromFile($uFile) { $tTemp = new FileCollection(); $tTemp->add($uFile); return $tTemp; } public static function fromFiles() { $uFiles = func_get_args(); if(is_array($uFiles[0])) { $uFiles = $uFiles[0]; } $tTemp = new FileCollection(); foreach($uFiles as &$tFile) { $tTemp->add($tFile); } return $tTemp; } public static function fromFileScan($uPattern) { $tSep = quotemeta(DIRECTORY_SEPARATOR); $tPos = strrpos($uPattern, $tSep); if($tSep != '/' && $tPos === false) { $tSep = '/'; $tPos = strrpos($uPattern, $tSep); } if($tPos !== false) { $tPattern = substr($uPattern, $tPos + strlen($tSep)); $tPath = substr($uPattern, 0, $tPos + strlen($tSep)); } else { $tPath = $uPattern; $tPattern = ''; } $tTemp = new FileCollection(); $tHandle = new DirectoryIterator($tPath); $tPatExists = (strlen($uPattern) > 0); for(;$tHandle->valid();$tHandle->next()) { if(!($tHandle->isFile())) { continue; } $tFile = $tHandle->current(); if($tPatExists && !fnmatch($tPattern, $tFile)) { continue; } $tTemp->add($tPath . $tFile); } return $tTemp; } } } ?><?php
 if(Extensions::isSelected('contracts')) { class contracts { const IsNumeric = 1; const IsEqual = 2; const IsMinimum = 3; const IsMinimumOrEqual = 4; const IsMaximum = 5; const IsMaximumOrEqual = 6; const Length = 7; const LengthMinimum = 8; const LengthMaximum = 9; const RegExp = 10; const Custom = 0; public static function extension_info() { return array( 'name' => 'contracts', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function check() { $uRule = func_get_args(); $uController = array_shift($uRule); $uValue = array_shift($uRule); if(count($uRule) == 0) { if(!$uValue) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } return true; } switch($uRule[0]) { case self::IsNumeric: if(!is_numeric($uRule[1])) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::IsEqual: for($tCount = count($uRule) - 1;$tCount > 0;$tCount--) { if($uValue == $uRule[$tCount]) { $tPasses = true; break; } } if(!isset($tPasses)) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::IsMinimum: if($uValue >= $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::IsMinimumOrEqual: if($uValue > $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::IsMaximum: if($uValue <= $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::IsMaximumOrEqual: if($uValue < $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::Length: if(strlen($uValue) != $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::LengthMinimum: if(strlen($uValue) < $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::LengthMaximum: if(strlen($uValue) > $uRule[1]) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::RegExp: if(!preg_match($uRule[1], $uValue)) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; case self::Custom: if(!call_user_func($uRule[1], $uValue)) { if(is_null($uController)) { return false; } $uController->error('Condition fail'); return false; } break; } return true; } } } ?><?php
 if(Extensions::isSelected('database')) { class database { public static $databases = array(); public static $datasets = array(); public static $default = null; public static function extension_info() { return array( 'name' => 'database', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array('pdo'), 'fwversion' => '1.0', 'fwdepends' => array('string', 'io') ); } public static function extension_load() { foreach(config::get('/databaseList', array()) as $tDatabaseConfig) { $tDatabase = new DatabaseConnection($tDatabaseConfig); self::$databases[$tDatabase->id] = $tDatabase; if(is_null(self::$default) || $tDatabase->default) { self::$default = $tDatabase; } } foreach(config::get('/datasetList', array()) as $tDatasetConfig) { $tDataset = new DatabaseDataset($tDatasetConfig); self::$datasets[$tDataset->id] = $tDataset; } } public static function &get() { $uArgs = func_get_args(); switch(count($uArgs)) { case 0: return self::$default; break; case 1: return self::$databases[$uArgs[0]]; break; } return null; } public static function sqlInsert($uTable, $uObject) { $tSql = 'INSERT INTO ' . $uTable . ' (' . implode(', ', array_keys($uObject)) . ') VALUES (' . implode(', ', array_values($uObject)) . ')'; return $tSql; } public static function sqlUpdate($uTable, $uObject, $uWhere, $uExtra = '') { $tPairs = array(); foreach($uObject as $tKey => &$tValue) { $tPairs[] = $tKey . '=' . $tValue; } $tSql = 'UPDATE ' . $uTable . ' SET ' . implode(', ', $tPairs); if(strlen($uWhere) > 0) { $tSql .= ' WHERE ' . $uWhere; } if(strlen($uExtra) > 0) { $tSql .= ' ' . $uExtra; } return $tSql; } public static function sqlDelete($uTable, $uWhere, $uExtra = '') { $tSql = 'DELETE FROM ' . $uTable; if(strlen($uWhere) > 0) { $tSql .= ' WHERE ' . $uWhere; } if(strlen($uExtra) > 0) { $tSql .= ' ' . $uExtra; } return $tSql; } public static function sqlSelect($uTable, $uFields, $uWhere, $uExtra = '') { $tSql = 'SELECT '; if(count($uFields) > 0) { $tSql .= implode(', ', $uFields); } else { $tSql .= '*'; } $tSql .= ' FROM ' . $uTable; if(strlen($uWhere) > 0) { $tSql .= ' WHERE ' . $uWhere; } if(strlen($uExtra) > 0) { $tSql .= ' ' . $uExtra; } return $tSql; } } class DatabaseConnection { public $id; public $default; protected $connection = null; public $driver = null; public $cache = array(); public $stats = array('cache' => 0, 'query' => 0); public $active = false; public $inTransaction = false; protected $pdoString; protected $username; protected $password; protected $initCommand; protected $overrideCase; protected $persistent; public $keyphase = null; public $cachePath; private $affectedRows; public function __construct($uConfig) { $this->id = $uConfig['@id']; $this->default = isset($uConfig['@default']); $this->pdoString = $uConfig['pdoString']['.']; $this->username = $uConfig['username']['.']; $this->password = $uConfig['password']['.']; if(isset($uConfig['initCommand']) && array_key_exists('.', $uConfig['initCommand'])) { $this->initCommand = $uConfig['initCommand']['.']; } if(isset($uConfig['overrideCase'])) { $this->overrideCase = $uConfig['overrideCase']['.']; } if(isset($uConfig['@keyphase'])) { $this->keyphase = $uConfig['@keyphase']; } $this->persistent = isset($uConfig['persistent']); if(isset($uConfig['cachePath'])) { $this->cachePath = Framework::translatePath($uConfig['cachePath']['.']); } else { $this->cachePath = QPATH_APP . 'writable/datasetCache/'; } } public function __destruct() { if($this->active) { $this->close(); } } public function open() { $tParms = array(); if($this->persistent) { $tParms[PDO::ATTR_PERSISTENT] = true; } switch($this->overrideCase) { case 'lower': $tParms[PDO::ATTR_CASE] = PDO::CASE_LOWER; break; case 'upper': $tParms[PDO::ATTR_CASE] = PDO::CASE_UPPER; break; default: $tParms[PDO::ATTR_CASE] = PDO::CASE_NATURAL; break; } $tParms[PDO::ATTR_ERRMODE] = PDO::ERRMODE_EXCEPTION; try { $this->connection = new PDO($this->pdoString, $this->username, $this->password, $tParms); } catch(PDOException $ex) { throw new PDOException('PDO Exception: ' . $ex->getMessage()); } $this->driver = $this->connection->getAttribute(PDO::ATTR_DRIVER_NAME); $this->active = true; if(strlen($this->initCommand) > 0) { $this->connection->exec($this->initCommand); } } public function close() { $this->active = false; } public function beginTransaction() { $this->open(); $this->connection->beginTransaction(); $this->inTransaction = true; } public function commit() { $this->connection->commit(); $this->inTransaction = false; } public function rollBack() { $this->connection->rollBack(); $this->inTransaction = false; } public function query($uQuery, $uParameters = array()) { $this->open(); $tQuery = $this->connection->prepare($uQuery); $tResult = $tQuery->execute($uParameters); $this->affectedRows = $tQuery->rowCount(); if($tResult) { return $this->affectedRows; } return false; } public function &queryFetch($uQuery, $uParameters = array()) { $this->open(); $tQuery = $this->connection->prepare($uQuery); $tQuery->execute($uParameters); $tIterator = new DataRowsIterator($tQuery); return $tIterator; } public function &querySet($uQuery, $uParameters = array()) { $this->open(); $tQuery = $this->connection->prepare($uQuery); $tQuery->execute($uParameters); $tResult = $tQuery->fetchAll(PDO::FETCH_ASSOC); $tQuery->closeCursor(); return $tResult; } public function &queryRow($uQuery, $uParameters = array()) { $this->open(); $tQuery = $this->connection->prepare($uQuery); $tQuery->execute($uParameters); $tResult = $tQuery->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT); $tQuery->closeCursor(); return $tResult; } public function &queryScalar($uQuery, $uParameters = array()) { $this->open(); $tQuery = $this->connection->prepare($uQuery); $tQuery->execute($uParameters); $tResult = $tQuery->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT); $tQuery->closeCursor(); return $tResult[0]; } public function lastInsertId($uName = null) { return $this->connection->lastInsertId($uName); } public function affectedRows() { return $this->affectedRows; } public function serverInfo() { return $this->connection->getAttribute(PDO::ATTR_SERVER_INFO); } public function dataset() { $uProps = func_get_args(); $uDataset = array_shift($uProps); return $this->datasetInternal(database::$datasets[$uDataset], $uProps); } public function &datasetFetch() { $uProps = func_get_args(); $uDataset = array_shift($uProps); return $this->datasetFetchInternal(database::$datasets[$uDataset], $uProps); } public function datasetSet() { $uProps = func_get_args(); $uDataset = array_shift($uProps); $tData = $this->datasetSetInternal(database::$datasets[$uDataset], $uProps); return $tData['data']; } public function datasetRow() { $uProps = func_get_args(); $uDataset = array_shift($uProps); $tData = $this->datasetSetInternal(database::$datasets[$uDataset], $uProps); if(count($tData['data']) > 0) { return $tData['data'][0]; } return null; } public function datasetScalar() { $uProps = func_get_args(); $uDataset = array_shift($uProps); $tData = $this->datasetSetInternal(database::$datasets[$uDataset], $uProps); if(count($tData['data']) > 0) { return current($tData['data'][0]); } return null; } public function datasetInternal(&$uDataset, &$uProps) { if($uDataset->transaction) { $this->beginTransaction(); } try { $tCount = 0; $tArray = array(); foreach($uDataset->parameters as &$tParam) { $tArray[$tParam] = $uProps[$tCount++]; } $tQueryExecute = string::format($uDataset->queryString, $tArray); if(Framework::$debug) { echo 'query: ', $tQueryExecute, "\n"; } $tResult = $this->query($tQueryExecute); if($this->inTransaction) { $this->commit(); } } catch(PDOException $ex) { if($this->inTransaction) { $this->rollBack(); } throw new PDOException($ex->getMessage()); } $this->stats['query']++; if(isset($tResult)) { return $this->affectedRows(); } return false; } public function &datasetFetchInternal(&$uDataset, &$uProps) { if($uDataset->transaction) { $this->beginTransaction(); } try { $tCount = 0; $tArray = array(); foreach($uDataset->parameters as &$tParam) { $tArray[$tParam] = $uProps[$tCount++]; } $tQueryExecute = string::format($uDataset->queryString, $tArray); if(Framework::$debug) { echo 'query: ', $tQueryExecute, "\n"; } $tResult = $this->queryFetch($tQueryExecute); if($this->inTransaction) { $this->commit(); } } catch(PDOException $ex) { if($this->inTransaction) { $this->rollBack(); } throw new PDOException($ex->getMessage()); } $this->stats['query']++; if(isset($tResult)) { return $tResult; } return false; } public function &datasetSetInternal(&$uDataset, &$uProps) { $uPropsSerialized = $uDataset->id; foreach($uProps as &$tProp) { $uPropsSerialized .= '_' . io::sanitize($tProp); } $tFileName = $this->id . '_' . $uPropsSerialized; $tFilePath = $this->cachePath . $tFileName; $tData = null; $tLoadedFromCache = false; if(isset($this->cache[$uPropsSerialized])) { $tData = &$this->cache[$uPropsSerialized]; $tData['data']->iterator->rewind(); $tLoadedFromCache = true; } else if($uDataset->cacheLife > 0 && is_readable($tFilePath)) { $tData = io::readSerialize($tFilePath, $this->keyphase); $tLoadedFromCache = true; $this->cache[$uPropsSerialized] = &$tData; } if(is_null($tData) || ($tData['lastmod'] + $uDataset->cacheLife < time())) { if($uDataset->transaction) { $this->beginTransaction(); } try { $tCount = 0; $tArray = array(); foreach($uDataset->parameters as &$tParam) { $tArray[$tParam] = $uProps[$tCount++]; } $tQueryExecute = string::format($uDataset->queryString, $tArray); if(Framework::$debug) { echo 'query: ', $tQueryExecute, "\n"; } $tData = array( 'data' => $this->querySet($tQueryExecute), 'lastmod' => time() ); if($this->inTransaction) { $this->commit(); } if($uDataset->cacheLife > 0) { $this->cache[$uPropsSerialized] = &$tData; io::writeSerialize($tFilePath, $tData, $this->keyphase); } } catch(PDOException $ex) { if($this->inTransaction) { $this->rollBack(); } throw new PDOException($ex->getMessage()); } $this->stats['query']++; } else { $this->stats['cache']++; } return $tData; } } class DatabaseDataset { public $id; public $queryString; public $parameters; public $cacheLife; public $transaction; public function __construct($uConfig) { $this->id = $uConfig['@id']; $this->queryString = $uConfig['.']; $this->parameters = strlen($uConfig['@parameters']) > 0 ? explode(',', $uConfig['@parameters']) : array(); $this->cacheLife = isset($uConfig['@cacheLife']) ? (int)$uConfig['@cacheLife'] : 0; $this->transaction = isset($uConfig['@transaction']); } } class DatabaseQuery { protected $database = null; private $table; private $fields; private $parameters; private $where; private $groupby; private $orderby; private $limit; private $offset; public function __construct(&$uDatabase = null) { $this->setDatabase($uDatabase); } public function setDatabase(&$uDatabase = null) { if(!is_null($uDatabase)) { $this->database = &$uDatabase; } else { $this->database = database::get(); } $this->clear(); } public function setDatabaseName($uDatabaseName) { $this->database = database::get($uDatabaseName); $this->clear(); } public function clear() { $this->table = ''; $this->fields = array(); $this->parameters = array(); $this->where = ''; $this->groupby = ''; $this->orderby = ''; $this->limit = -1; $this->offset = -1; } public function setTable($uTableName) { $this->table = $uTableName; return $this; } public function joinTable($uTableName, $uCondition, $uJoinType = 'INNER') { $this->table .= ' ' . $uJoinType . ' JOIN ' . $uTableName . ' ON ' . $uCondition; return $this; } public function setFields($uArray) { foreach($uArray as $tField => &$tValue) { if(is_null($tValue)) { $this->fields[$tField] = 'NULL'; } else { $this->fields[$tField] = ':' . $tField; $this->parameters[$this->fields[$tField]] = $tValue; } } return $this; } public function setFieldsDirect($uArray) { $this->fields = &$uArray; return $this; } public function addField($uField, $uValue = null) { if(func_num_args() == 1) { $this->fields[] = $uField; return $this; } if(is_null($uValue)) { $this->fields[$uField] = 'NULL'; } else { $this->fields[$uField] = ':' . $uField; $this->parameters[$this->fields[$uField]] = $uValue; } return $this; } public function addFieldDirect($uField, $uValue) { $this->fields[$uField] = $uValue; return $this; } public function addParameter($uParameter, $uValue) { $this->parameters[$uParameter] = $uValue; return $this; } public function setWhere($uCondition) { $this->where = $uCondition; return $this; } public function andWhere($uCondition) { $this->where .= ' AND ' . $uCondition; return $this; } public function orWhere($uCondition) { $this->where .= ' OR ' . $uCondition; return $this; } public function setGroupBy($uGroupBy) { $this->groupby = $uGroupBy; return $this; } public function addGroupBy($uGroupBy) { $this->groupby .= ', ' . $uGroupBy; return $this; } public function setOrderBy($uOrderBy, $uOrder = 'ASC') { $this->orderby = $uOrderBy . ' ' . $uOrder; return $this; } public function addOrderBy($uOrderBy, $uOrder = 'ASC') { $this->orderby .= ', ' . $uOrderBy . ' ' . $uOrder; return $this; } public function setLimit($uLimit) { $this->limit = $uLimit; return $this; } public function setOffset($uOffset) { $this->offset = $uOffset; return $this; } public function insert() { $this->database->query(database::sqlInsert($this->table, $this->fields), $this->parameters); if($this->database->driver == 'pgsql') { $tInsertId = $this->database->lastInsertId($this->table . '_id_seq'); } else { $tInsertId = $this->database->lastInsertId(); } $this->clear(); return $tInsertId; } public function update() { if($this->database->driver == 'mysql' && $this->limit >= 0) { $tExtra = 'LIMIT ' . $this->limit; } else { $tExtra = ''; } $this->database->query(database::sqlUpdate($this->table, $this->fields, $this->where, $tExtra), $this->parameters); $this->clear(); return $this->database->affectedRows(); } public function delete() { if($this->database->driver == 'mysql' && $this->limit >= 0) { $tExtra = 'LIMIT ' . $this->limit; } else { $tExtra = ''; } $this->database->query(database::sqlDelete($this->table, $this->where, $tExtra), $this->parameters); $this->clear(); return $this->database->affectedRows(); } public function &get() { if($this->limit >= 0) { if($this->offset >= 0) { $tExtra = 'LIMIT ' . $this->limit . ' OFFSET ' . $this->offset; } else { $tExtra = 'LIMIT ' . $this->limit; } } else { $tExtra = ''; } $tReturn = $this->database->querySet(database::sqlSelect($this->table, $this->fields, $this->where, $tExtra), $this->parameters); $this->clear(); return $tReturn; } public function &getRow() { if($this->limit >= 0) { if($this->offset >= 0) { $tExtra = 'LIMIT ' . $this->limit . ' OFFSET ' . $this->offset; } else { $tExtra = 'LIMIT ' . $this->limit; } } else { $tExtra = ''; } $tReturn = $this->database->queryRow(database::sqlSelect($this->table, $this->fields, $this->where, $tExtra), $this->parameters); $this->clear(); return $tReturn; } public function &getScalar() { if($this->limit >= 0) { if($this->offset >= 0) { $tExtra = 'LIMIT ' . $this->limit . ' OFFSET ' . $this->offset; } else { $tExtra = 'LIMIT ' . $this->limit; } } else { $tExtra = ''; } $tReturn = $this->database->queryScalar(database::sqlSelect($this->table, $this->fields, $this->where, $tExtra), $this->parameters); $this->clear(); return $tReturn; } public function &calculate($uTable, $uOperation = 'COUNT', $uField = '*', $uWhere = null) { $tReturn = $this->database->queryScalar(database::sqlSelect($uTable, array($uOperation . '(' . $uField . ')'), $uWhere, null), array()); return $tReturn; } public function dataset() { $uProps = func_get_args(); $uDataset = array_shift($uProps); return $this->database->datasetInternal(database::$datasets[$uDataset], $uProps); } public function &datasetFetch() { $uProps = func_get_args(); $uDataset = array_shift($uProps); return $this->database->datasetFetchInternal(database::$datasets[$uDataset], $uProps); } public function datasetSet() { $uProps = func_get_args(); $uDataset = array_shift($uProps); $tData = $this->database->datasetSetInternal(database::$datasets[$uDataset], $uProps); return $tData['data']; } public function datasetRow() { $uProps = func_get_args(); $uDataset = array_shift($uProps); $tData = $this->database->datasetSetInternal(database::$datasets[$uDataset], $uProps); if(count($tData['data']) > 0) { return $tData['data'][0]; } return null; } public function datasetScalar() { $uProps = func_get_args(); $uDataset = array_shift($uProps); $tData = $this->database->datasetSetInternal(database::$datasets[$uDataset], $uProps); if(count($tData['data']) > 0) { return current($tData['data'][0]); } return null; } } class DataRowsIterator extends NoRewindIterator implements Countable { private $connection; private $current; private $count; private $cursor = 0; public function __construct($uConnection) { $this->connection = &$uConnection; $this->count = $this->connection->rowCount(); $this->current = $this->connection->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT); } public function __destruct() { $this->connection->closeCursor(); } public function count() { return $this->count; } public function current() { return $this->current; } public function key() { return null; } public function next() { $this->cursor++; $this->current = $this->connection->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT); return $this->current; } public function valid() { if($this->cursor < $this->count) { return true; } return false; } } } ?>
<?php
 if(Extensions::isSelected('fb')) { class fb { public static $appId; public static $appSecret; public static $appUrl; public static $appPageId; public static $appRedirectUri; public static $api = null; public static $userId = null; public static $userPermissions = null; public static $user = null; public static function extension_info() { return array( 'name' => 'fb', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('session', 'http') ); } public static function extension_load() { self::$appId = Config::get('/facebook/APP_ID/.'); self::$appSecret = Config::get('/facebook/APP_SECRET/.'); self::$appUrl = Config::get('/facebook/APP_URL/.'); self::$appPageId = Config::get('/facebook/APP_PAGE_ID/.'); self::$appRedirectUri = Config::get('/facebook/APP_REDIRECT_URI/.'); } public static function loadApi() { if(is_null(self::$api)) { self::$api = new Facebook(array( 'appId' => self::$appId, 'secret' => self::$appSecret, 'cookie' => true )); } } public static function getUserId() { if(is_null(self::$userId)) { self::$userId = self::$api->getUser(); if(!self::$userId) { self::$userId = null; } } return self::$userId; } public static function checkLogin($uPermissions, $uRequiredPermissions = null) { if(is_null($uRequiredPermissions)) { $uRequiredPermissions = $uPermissions; } if(!self::checkUserPermission($uRequiredPermissions)) { $tLoginUrl = self::$api->getLoginUrl(array( 'scope' => $uPermissions, 'redirect_uri' => self::$appRedirectUri )); http::sendRedirect($tLoginUrl); return false; } return true; } public static function checkUserPermission($uPermissions) { if(is_null(self::getUserId())) { self::$user = null; return false; } else if(is_null(self::$userPermissions)) { try { self::$userPermissions = self::$api->api('/me/permissions'); } catch(FacebookApiException $tException) { self::$userPermissions = null; return false; } } foreach(explode(',', $uPermissions) as $tPermission) { if(!array_key_exists($tPermission, self::$userPermissions['data'][0])) { return false; } } return true; } public static function checkLike($uId) { if(is_null(self::getUserId())) { self::$user = null; return false; } else { $tLikeResponse = self::$api->api('/me/likes/' . $uId); if(!empty($tLikeResponse['data'])) { return true; } } return false; } public static function getUser() { if(is_null(self::getUserId())) { self::$user = null; } else if(is_null(self::$user)) { try { self::$user = self::$api->api('/me'); } catch(FacebookApiException $tException) { self::$user = null; } } return self::$user; } public static function getUserLikes() { try { $tReturn = self::$api->api('/me/likes'); } catch(FacebookApiException $tException) { $tReturn = null; } return $tReturn; } } class Facebook extends BaseFacebook { public function __construct($config) { parent::__construct($config); } protected static $kSupportedKeys = array('state', 'code', 'access_token', 'user_id'); protected function setPersistentData($key, $value) { if(!in_array($key, self::$kSupportedKeys)) { self::errorLog('Unsupported key passed to setPersistentData.'); return; } $session_var_name = $this->constructSessionVariableName($key); session::set($session_var_name, $value); } protected function getPersistentData($key, $default = false) { if(!in_array($key, self::$kSupportedKeys)) { self::errorLog('Unsupported key passed to getPersistentData.'); return $default; } $session_var_name = $this->constructSessionVariableName($key); return session::get($session_var_name, $default); } protected function clearPersistentData($key) { if(!in_array($key, self::$kSupportedKeys)) { self::errorLog('Unsupported key passed to clearPersistentData.'); return; } $session_var_name = $this->constructSessionVariableName($key); session::remove($session_var_name); } protected function clearAllPersistentData() { foreach(self::$kSupportedKeys as $key) { $this->clearPersistentData($key); } } protected function constructSessionVariableName($key) { return implode('_', array('fb', $this->getAppId(), $key)); } } } ?><?php
 if(Extensions::isSelected('html')) { class html { public static function extension_info() { return array( 'name' => 'html', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string', 'i8n') ); } public static function selectOptions($uArray = array(), $uDefault = null) { $tOutput = ''; foreach($uArray as $tKey => &$tVal) { $tOutput .= '<option value="' . string::dquote($tKey) . '"'; if($uDefault == $tKey) { $tOutput .= ' selected="selected"'; } $tOutput .= '>' . $tVal . '</option>'; } return $tOutput; } public static function textBox($uName, $uValue) { $tOutput = '<input type="text" name="' . string::dquote($uValue) . '" value="' . string::dquote($uValue) . '" />'; return $tOutput; } public static function checkBox($uName, $uValue, $uCurrentValue = null, $uText = null, $uId = null) { if(is_null($uId)) { $uId = $uName; } $tOutput = '<input type="checkbox" id="' . string::dquote($uId) . '" name="' . string::dquote($uName) . '" value="' . string::dquote($uValue) . '"'; if($uCurrentValue == $uValue) { $tOutput .= ' checked="checked"'; } $tOutput .= ' />'; if(!is_null($uText)) { $tOutput .= '<label for="' . string::dquote($uId) . '">' . $uText . '</label>'; } return $tOutput; } public static function pager($uOptions) { $tPages = ceil($uOptions['total'] / $uOptions['pagesize']); if(!isset($uOptions['divider'])) { $uOptions['divider'] = ''; } if(!isset($uOptions['dots'])) { $uOptions['dots'] = ' ... '; } if(!isset($uOptions['passivelink'])) { $uOptions['passivelink'] = $uOptions['link']; } if(!isset($uOptions['activelink'])) { $uOptions['activelink'] = $uOptions['passivelink']; } if(!isset($uOptions['firstlast'])) { $uOptions['firstlast'] = true; } if(isset($uOptions['current'])) { $tCurrent = (int)$uOptions['current']; if($tCurrent <= 0) { $tCurrent = 1; } } else { $tCurrent = 1; } if(isset($uOptions['numlinks'])) { $tNumLinks = (int)$uOptions['numlinks']; } else { $tNumLinks = 10; } $tStart = $tCurrent - floor($tNumLinks * 0.5); $tEnd = $tCurrent + floor($tNumLinks * 0.5) - 1; if($tStart < 1) { $tEnd += abs($tStart) + 1; $tStart = 1; } if($tEnd > $tPages) { if($tStart - $tEnd - $tPages > 0) { $tStart -= $tEnd - $tPages; } $tEnd = $tPages; } $tResult = ''; if($tPages > 1) { if($tCurrent <= 1) { if($uOptions['firstlast']) { $tResult .= string::format($uOptions['passivelink'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => '1', 'pagetext' => '&lt;&lt;')); } $tResult .= string::format($uOptions['passivelink'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => '1', 'pagetext' => '&lt;')); } else { if($uOptions['firstlast']) { $tResult .= string::format($uOptions['link'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => '1', 'pagetext' => '&lt;&lt;')); } $tResult .= string::format($uOptions['link'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $tCurrent - 1, 'pagetext' => '&lt;')); } if($tStart > 1) { $tResult .= $uOptions['dots']; } else { $tResult .= $uOptions['divider']; } } for($i = $tStart;$i <= $tEnd;$i++) { if($tCurrent == $i) { $tResult .= string::format($uOptions['activelink'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $i, 'pagetext' => $i)); } else { $tResult .= string::format($uOptions['link'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $i, 'pagetext' => $i)); } if($i != $tEnd) { $tResult .= $uOptions['divider']; } } if($tPages > 1) { if($tEnd < $tPages) { $tResult .= $uOptions['dots']; } else { $tResult .= $uOptions['divider']; } if($tCurrent >= $tPages) { $tResult .= string::format($uOptions['passivelink'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $tPages, 'pagetext' => '&gt;')); if($uOptions['firstlast']) { $tResult .= string::format($uOptions['passivelink'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $tPages, 'pagetext' => '&gt;&gt;')); } } else { $tResult .= string::format($uOptions['link'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $tCurrent + 1, 'pagetext' => '&gt;')); if($uOptions['firstlast']) { $tResult .= string::format($uOptions['link'], array('root' => Framework::$siteroot, 'lang' => i8n::$languageKey, 'page' => $tPages, 'pagetext' => '&gt;&gt;')); } } } return $tResult; } public static function table($uOptions) { if(!isset($uOptions['table'])) { $uOptions['table'] = '<table>'; } if(!isset($uOptions['cell'])) { $uOptions['cell'] = '<td>{value}</td>'; } if(!isset($uOptions['header'])) { $uOptions['header'] = '<th>{value}</th>'; } $tResult = string::format($uOptions['table'], array()); if(isset($uOptions['headers'])) { $tResult .= '<tr>'; foreach($uOptions['headers'] as &$tColumn) { $tResult .= string::format($uOptions['header'], array('value' => $tColumn)); } $tResult .= '</tr>'; } $tCount = 0; foreach($uOptions['data'] as &$tRow) { if(isset($uOptions['rowFunc'])) { $tResult .= call_user_func($uOptions['rowFunc'], $tRow, $tCount++); } else if(isset($uOptions['row'])) { $tResult .= string::format($uOptions['row'], $tRow); } else { $tResult .= '<tr>'; foreach($tRow as &$tColumn) { $tResult .= string::format($uOptions['cell'], array('value' => $tColumn)); } $tResult .= '</tr>'; } } $tResult .= '</table>'; return $tResult; } } } ?><?php
 if(Extensions::isSelected('http')) { class http { public static $platform = null; public static $crawler = null; public static $crawlerType = null; public static $isAjax = false; public static $isBrowser = false; public static $isRobot = false; public static $isMobile = false; public static $languages = array(); public static function extension_info() { return array( 'name' => 'http', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string', 'io') ); } public static function extension_load() { ini_set('session.use_trans_sid', '0'); header('P3P:CP="IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT"'); static $aEnvNames = array( 'HTTP_ACCEPT_LANGUAGE', 'HTTP_HOST', 'HTTP_USER_AGENT', 'HTTP_REFERER', 'PHP_SELF', 'QUERY_STRING', 'REQUEST_URI', 'SERVER_ADDR', 'SERVER_NAME', 'SERVER_PORT' ); foreach($aEnvNames as &$tEnv) { if(isset($_SERVER[$tEnv]) && strlen($_SERVER[$tEnv]) > 0) { continue; } $_SERVER[$tEnv] = getenv($tEnv) or $_SERVER[$tEnv] = ''; } if(isset($_SERVER['HTTP_CLIENT_IP'])) { $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_CLIENT_IP']; } else if(!isset($_SERVER['REMOTE_ADDR']) && isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR']; } else { $_SERVER['REMOTE_ADDR'] = getenv('REMOTE_ADDR') or $_SERVER['REMOTE_ADDR'] = '0.0.0.0'; } $_SERVER['PHP_SELF'] = str_replace(array('<', '>'), array('%3C', '%3E'), $_SERVER['PHP_SELF']); $_SERVER['QUERY_STRING'] = self::xss($_SERVER['QUERY_STRING']); $tPos = strpos($_SERVER['REQUEST_URI'], '?'); if($tPos === false) { $_SERVER['REQUEST_PATH'] = $_SERVER['REQUEST_URI']; } else { $_SERVER['REQUEST_PATH'] = substr($_SERVER['REQUEST_URI'], 0, $tPos); } foreach(config::get('/http/rewriteList', array()) as $tRewriteList) { $tReturn = preg_replace('|^' . $tRewriteList['@match'] . '$|', $tRewriteList['@forward'], $_SERVER['REQUEST_URI'], -1, $tCount); if($tCount > 0) { $_SERVER['REQUEST_URI'] = $tReturn; break; } } if(strlen($_SERVER['HTTP_HOST']) == 0) { $_SERVER['HTTP_HOST'] = isset($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : $_SERVER['SERVER_ADDR']; if(isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] != '80') { $_SERVER['HTTP_HOST'] .= $_SERVER['SERVER_PORT']; } } if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') { self::$isAjax = true; } $tAutoCheckUserAgents = intval(Config::get('/http/userAgents/@autoCheck', '1')); if($tAutoCheckUserAgents) { self::checkUserAgent(); } self::$languages = self::parseHeaderString($_SERVER['HTTP_ACCEPT_LANGUAGE']); $tParsingType = Config::get('/http/request/@parsingType', '0'); $tDefaultParameter = Config::get('/http/request/@getParameters', '?&'); $tDefaultKey = Config::get('/http/request/@getKeys', '='); $tDefaultSeperator = Config::get('/http/request/@getSeperator', '/'); if($tParsingType == '1') { self::parseGetType1($tDefaultParameter, $tDefaultKey); $tGetProcessed = true; } else if($tParsingType == '2') { self::parseGetType2($tDefaultParameter, $tDefaultKey, $tDefaultSeperator); $tGetProcessed = true; } if(get_magic_quotes_gpc()) { if(!isset($tGetProcessed)) { array_walk($_GET, 'http::magic_quotes_deslash'); } array_walk($_POST, 'http::magic_quotes_deslash'); array_walk($_COOKIE, 'http::magic_quotes_deslash'); } $_REQUEST = array_merge($_GET, $_POST, $_COOKIE); } public static function checkUserAgent() { foreach(config::get('/http/userAgents/platformList', array()) as $tPlatformList) { if(preg_match('/' . $tPlatformList['@match'] . '/i', $_SERVER['HTTP_USER_AGENT'])) { self::$platform = $tPlatformList['@name']; break; } } foreach(config::get('/http/userAgents/crawlerList', array()) as $tCrawlerList) { if(preg_match('/' . $tCrawlerList['@match'] . '/i', $_SERVER['HTTP_USER_AGENT'])) { self::$crawler = $tCrawlerList['@name']; self::$crawlerType = $tCrawlerList['@type']; switch($tCrawlerList['@type']) { case 'bot': self::$isRobot = true; break; case 'mobile': self::$isMobile = true; break; case 'browser': default: self::$isBrowser = true; break; } break; } } } public static function xss($uString) { return str_replace(array('<', '>', '"', '\'', '$', '(', ')', '%28', '%29'), array('&#60;', '&#62;', '&#34;', '&#39;', '&#36;', '&#40;', '&#41;', '&#40;', '&#41;'), $uString); } public static function encode($uString) { return urlencode($uString); } public static function decode($uString) { return urldecode($uString); } public static function sendStatus($uStatusCode) { switch((int)$uStatusCode) { case 100: $tStatus = 'HTTP/1.1 100 Continue'; break; case 101: $tStatus = 'HTTP/1.1 101 Switching Protocols'; break; case 200: $tStatus = 'HTTP/1.1 200 OK'; break; case 201: $tStatus = 'HTTP/1.1 201 Created'; break; case 202: $tStatus = 'HTTP/1.1 202 Accepted'; break; case 203: $tStatus = 'HTTP/1.1 203 Non-Authoritative Information'; break; case 204: $tStatus = 'HTTP/1.1 204 No Content'; break; case 205: $tStatus = 'HTTP/1.1 205 Reset Content'; break; case 206: $tStatus = 'HTTP/1.1 206 Partial Content'; break; case 300: $tStatus = 'HTTP/1.1 300 Multiple Choices'; break; case 301: $tStatus = 'HTTP/1.1 301 Moved Permanently'; break; case 302: $tStatus = 'HTTP/1.1 302 Found'; break; case 303: $tStatus = 'HTTP/1.1 303 See Other'; break; case 304: $tStatus = 'HTTP/1.1 304 Not Modified'; break; case 305: $tStatus = 'HTTP/1.1 305 Use Proxy'; break; case 307: $tStatus = 'HTTP/1.1 307 Temporary Redirect'; break; case 400: $tStatus = 'HTTP/1.1 400 Bad Request'; break; case 401: $tStatus = 'HTTP/1.1 401 Unauthorized'; break; case 402: $tStatus = 'HTTP/1.1 402 Payment Required'; break; case 403: $tStatus = 'HTTP/1.1 403 Forbidden'; break; case 404: $tStatus = 'HTTP/1.1 404 Not Found'; break; case 405: $tStatus = 'HTTP/1.1 405 Method Not Allowed'; break; case 406: $tStatus = 'HTTP/1.1 406 Not Acceptable'; break; case 407: $tStatus = 'HTTP/1.1 407 Proxy Authentication Required'; break; case 408: $tStatus = 'HTTP/1.1 408 Request Timeout'; break; case 409: $tStatus = 'HTTP/1.1 409 Conflict'; break; case 410: $tStatus = 'HTTP/1.1 410 Gone'; break; case 411: $tStatus = 'HTTP/1.1 411 Length Required'; break; case 412: $tStatus = 'HTTP/1.1 412 Precondition Failed'; break; case 413: $tStatus = 'HTTP/1.1 413 Request Entity Too Large'; break; case 414: $tStatus = 'HTTP/1.1 414 Request-URI Too Long'; break; case 415: $tStatus = 'HTTP/1.1 415 Unsupported Media Type'; break; case 416: $tStatus = 'HTTP/1.1 416 Requested Range Not Satisfiable'; break; case 417: $tStatus = 'HTTP/1.1 417 Expectation Failed'; break; case 500: $tStatus = 'HTTP/1.1 500 Internal Server Error'; break; case 501: $tStatus = 'HTTP/1.1 501 Not Implemented'; break; case 502: $tStatus = 'HTTP/1.1 502 Bad Gateway'; break; case 503: $tStatus = 'HTTP/1.1 503 Service Unavailable'; break; case 504: $tStatus = 'HTTP/1.1 504 Gateway Timeout'; break; case 505: $tStatus = 'HTTP/1.1 505 HTTP Version Not Supported'; break; default: return; } self::sendHeader($tStatus); } public static function sendHeader($uHeader, $uValue = null, $uReplace = false) { if(isset($uValue)) { header($uHeader . ': ' . $uValue, $uReplace); } else { header($uHeader, $uReplace); } } public static function sendFile($uFilePath, $uAttachment = false, $uFindMimeType = true) { $tExtension = pathinfo($uFilePath, PATHINFO_EXTENSION); if($uFindMimeType) { $tType = io::getMimeType($tExtension); } else { $tType = 'application/octet-stream'; } self::sendHeaderExpires(0); self::sendHeaderNoCache(); self::sendHeader('Content-Type', $tType, true); if($uAttachment) { self::sendHeader('Content-Disposition', 'attachment; filename=' . pathinfo($uFilePath, PATHINFO_BASENAME) . ';', true); } self::sendHeader('Content-Transfer-Encoding', 'binary', true); self::sendHeader('Content-Length', filesize($uFilePath), true); self::sendHeaderETag(md5_file($uFilePath)); @readfile($uFilePath); exit(); } public static function sendHeaderLastModified($uTime, $uNotModified = false) { self::sendHeader('Last-Modified', gmdate('D, d M Y H:i:s', $uTime) . ' GMT', true); if($uNotModified) { self::sendStatus(304); } } public static function sendHeaderExpires($uTime) { self::sendHeader('Expires', gmdate('D, d M Y H:i:s', $uTime) . ' GMT', true); } public static function sendRedirect($uLocation, $uTerminate = true) { self::sendHeader('Location', $uLocation, true); if($uTerminate) { exit(); } } public static function sendHeaderETag($uHash) { self::sendHeader('ETag', '"' . $uHash . '"', true); } public static function sendHeaderNoCache() { self::sendHeader('Pragma', 'public', true); self::sendHeader('Cache-Control', 'no-store, no-cache, must-revalidate', true); self::sendHeader('Cache-Control', 'pre-check=0, post-check=0, max-age=0'); } public static function sendCookie($uCookie, $uValue, $uExpire = 0) { setrawcookie($uCookie, self::encode($uValue), $uExpire); } public static function parseGetType1($uParameters = '?&', $uKeys = '=') { $tUri = $_SERVER['QUERY_STRING']; $_GET = string::parseQueryString($tUri, $uParameters, $uKeys); } public static function parseGetType2($uParameters = '?&', $uKeys = '=', $uSeperator = '/') { $tUri = $_SERVER['QUERY_STRING']; $_GET = string::parseQueryString($tUri, $uParameters, $uKeys, $uSeperator); } public static function parseHeaderString($uString) { $tResult = array(); foreach(explode(',', $uString) as $tPiece) { $tPiece = trim($tPiece); $tResult[] = substr($tPiece, 0, strcspn($tPiece, ';')); } return $tResult; } public static function get($uKey, $uDefault = '', $uFilter = null) { if(!array_key_exists($uKey, $_GET)) { return $uDefault; } if(!is_null($uFilter)) { return call_user_func($uFilter, $_GET[$uKey]); } return $_GET[$uKey]; } public static function post($uKey, $uDefault = null) { if(!array_key_exists($uKey, $_POST)) { return $uDefault; } return $_POST[$uKey]; } public static function cookie($uKey, $uDefault = null) { if(!array_key_exists($uKey, $_COOKIE)) { return $uDefault; } return $_COOKIE[$uKey]; } public static function magic_quotes_deslash(&$uItem) { switch(gettype($uItem)) { case 'array': array_walk($uItem, 'http::magic_quotes_deslash'); break; case 'string': $uItem = stripslashes($uItem); break; } } } } ?>
<?php
 if(Extensions::isSelected('i8n')) { class i8n { public static $languages = array(); public static $language = null; public static $languageKey; public static function extension_info() { return array( 'name' => 'i8n', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('http') ); } public static function extension_load() { foreach(Config::get('/i8n/languageList', array()) as $tLanguage) { self::$languages[$tLanguage['@id']] = array( 'key' => $tLanguage['@id'], 'name' => $tLanguage['.'] ); } $tLanguageKey = Config::get('/i8n/routing/@languageUrlKey', null); if(!is_null($tLanguageKey)) { if(array_key_exists($tLanguageKey, $_GET)) { if(self::setLanguage($_GET[$tLanguageKey], true)) { return; } } } if(!PHP_SAPI_CLI) { foreach(http::$languages as $tLanguage) { if(self::setLanguage($tLanguage, false)) { return; } } } foreach(array_keys(self::$languages) as $tLanguage) { if(self::setLanguage($tLanguage, false)) { return; } } } private static function setLanguage($uLanguage, $uLastChoice = false) { if(array_key_exists($uLanguage, self::$languages)) { self::$language = self::$languages[$uLanguage]; self::$languageKey = $uLanguage; return true; } if($uLastChoice) { $tExploded = explode('-', $uLanguage, 2); if(array_key_exists($tExploded[0], self::$languages)) { self::$language = self::$languages[$tExploded[0]]; self::$languageKey = $tExploded[0]; return true; } } return false; } } } ?>
<?php
 if(Extensions::isSelected('io')) { class io { public static function extension_info() { return array( 'name' => 'io', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string') ); } public static function getMimeType($uExtension, $uDefault = 'application/octet-stream') { switch(string::toLower($uExtension)) { case 'pdf': $tType = 'application/pdf'; break; case 'exe': $tType = 'application/octet-stream'; break; case 'zip': $tType = 'application/zip'; break; case 'gz': $tType = 'application/x-gzip'; break; case 'tar': $tType = 'application/x-tar'; break; case 'csv': $tType = 'text/csv'; break; case 'txt': case 'text': case 'log': $tType = 'text/plain'; break; case 'rtf': $tType = 'text/rtf'; break; case 'eml': $tType = 'message/rfc822'; break; case 'xml': case 'xsl': $tType = 'text/xml'; break; case 'doc': case 'word': $tType = 'application/msword'; break; case 'docx': $tType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'; break; case 'xls': $tType = 'application/vnd.ms-excel'; break; case 'xl': $tType = 'application/excel'; break; case 'xlsx': $tType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'; break; case 'ppt': $tType = 'application/vnd.ms-powerpoint'; break; case 'bmp': $tType = 'image/bmp'; break; case 'gif': $tType = 'image/gif'; break; case 'png': $tType = 'image/png'; break; case 'jpeg': case 'jpe': case 'jpg': $tType = 'image/jpeg'; break; case 'tif': case 'tiff': $tType = 'image/tiff'; break; case 'mid': case 'midi': $tType = 'audio/midi'; break; case 'mpga': case 'mp2': case 'mp3': $tType = 'audio/mpeg'; break; case 'wav': $tType = 'audio/x-wav'; break; case 'mpeg': case 'mpg': case 'mpe': $tType = 'video/mpeg'; break; case 'qt': case 'mov': $tType = 'video/quicktime'; break; case 'avi': $tType = 'video/x-msvideo'; break; case 'swf': $tType = 'application/x-shockwave-flash'; break; case 'htm': case 'html': case 'shtm': case 'shtml': $tType = 'text/html'; break; case 'php': $tType = 'application/x-httpd-php'; break; case 'phps': $tType = 'application/x-httpd-php-source'; break; case 'css': $tType = 'text/css'; break; case 'js': $tType = 'application/x-javascript'; break; default: $tType = $uDefault; } return $tType; } public static function read($uPath) { return file_get_contents($uPath); } public static function write($uPath, $uContent) { return file_put_contents($uPath, $uContent, LOCK_EX); } public static function readSerialize($uPath, $uEncryptKey = null) { $tContent = self::read($uPath); if(!is_null($uEncryptKey)) { $tContent = string::decrypt($tContent, $uEncryptKey); } return unserialize($tContent); } public static function writeSerialize($uPath, $uContent, $uEncryptKey = null) { $tContent = serialize($uContent); if(!is_null($uEncryptKey)) { $tContent = string::encrypt($tContent, $uEncryptKey); } return self::write($uPath, $tContent); } public static function touch($uPath) { return touch($uPath); } public static function sanitize($uFilename) { static $aReplaceChars = array('_' => '-', '\\' => '-', '/' => '-', ':' => '-', '?' => '-', '*' => '-', '"' => '-', '\'' => '-', '<' => '-', '>' => '-', '|' => '-', '.' => '-'); return strtr($uFilename, $aReplaceChars); } } } ?><?php
 if(Extensions::isSelected('logger')) { class logger { public static $filename; public static $line; public static $eof = "\r\n"; public static $directory; public static function extension_info() { return array( 'name' => 'logger', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string', 'http') ); } public static function extension_load() { self::$filename = Config::get('/logger/@filename', '{date|\'d-m-Y\'}.txt'); self::$line = Config::get('/logger/@line', '[{date|\'d-m-Y H:i:s\'}] {strtoupper|@category} | {@ip} | {@message}'); self::$directory = QPATH_APP . 'writable/logs/'; set_exception_handler('logger::exceptionCallback'); set_error_handler('logger::errorCallback', E_ALL); } public static function errorCallback($uCode, $uMessage, $uFile, $uLine) { throw new ErrorException($uMessage, $uCode, 0, $uFile, $uLine); } public static function exceptionCallback($uException) { switch($uException->getCode()) { case E_ERROR: case E_USER_ERROR: case E_RECOVERABLE_ERROR: $tType = 'Error'; break; case E_WARNING: case E_USER_WARNING: $tType = 'Warning'; break; case E_NOTICE: case E_USER_NOTICE: $tType = 'Notice'; break; case E_STRICT: $tType = 'Strict'; break; case 8192: case 16384: break; default: $tType = 'Unknown'; break; } $tIgnoreError = false; Events::invoke('reportError', array( 'type' => &$tType, 'message' => $uException->getMessage(), 'file' => $uException->getFile(), 'line' => $uException->getLine(), 'ignore' => &$tIgnoreError )); if(!$tIgnoreError) { http::sendStatus(500); http::sendHeader('Content-Type', 'text/html', true); Events::setDisabled(true); $tEventDepth = Events::getEventDepth(); for($tCount = ob_get_level(); --$tCount > 1;ob_end_flush()); if(Framework::$development) { $tDeveloperLocation = pathinfo($uException->getFile(), PATHINFO_FILENAME) . ' @' . $uException->getLine(); } else { $tDeveloperLocation = ''; } $tString = ''; $tString .= '<div>'; $tString .= '<div style="font: 11pt \'Lucida Sans Unicode\'; color: #000060; border-bottom: 1px solid #C0C0C0; background: #F0F0F0; padding: 8px 12px 8px 12px;"><span style="font-weight: bold;">' . $tType . '</span>: ' . $tDeveloperLocation . '</div>' . self::$eof; $tString .= '<div style="font: 10pt \'Lucida Sans Unicode\'; color: #404040; padding: 0px 12px 0px 12px; margin: 20px 0px 20px 0px; line-height: 20px;">' . $uException->getMessage() . '</div>' . self::$eof; if(Framework::$development) { if(count($tEventDepth) > 0) { $tString .= '<div style="font: 10pt \'Lucida Sans Unicode\'; color: #800000; padding: 0px 12px 0px 12px; margin: 20px 0px 20px 0px; line-height: 20px;"><b>eventDepth:</b>' . implode('<br />' . self::$eof, $tEventDepth) . '</div>' . self::$eof; } $tString .= '<div style="font: 10pt \'Lucida Sans Unicode\'; color: #800000; padding: 0px 12px 0px 12px; margin: 20px 0px 20px 0px; line-height: 20px;"><b>stackTrace:</b>' . $uException->getTraceAsString() . '</div>' . self::$eof; } $tString .= '</div>'; self::write('error', array('message' => $uException->__toString())); $tString .= '<div style="font: 7pt \'Lucida Sans Unicode\'; color: #808080; padding: 0px 12px 0px 12px;">Generated by <a href="mailto:eser@sent.com">' . ucfirst(INCLUDED) . '</a>.</div>'; echo $tString; exit(); } } public static function write($uCategory, $uParams) { $uParams['category'] = &$uCategory; $uParams['ip'] = $_SERVER['REMOTE_ADDR']; $tFilename = self::$directory . string::format(self::$filename, $uParams); $tContent = string::format(self::$line . self::$eof . self::$eof, $uParams); file_put_contents($tFilename, $tContent, FILE_APPEND); } } } ?><?php
 if(Extensions::isSelected('media')) { class media { public static $cachePath; public static function extension_info() { return array( 'name' => 'media', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('io') ); } public static function extension_load() { self::$cachePath = Framework::translatePath(Config::get('/media/@cachePath', '{app}cache/media')); } public static function file($uVars) { if(!array_key_exists('cache', $uVars)) { $uVars['cache'] = self::$cachePath; } $tImageResize = new MediaResize($uVars); $tImageResize->output(); } } class MediaResize { var $source; var $sx, $sy, $sw, $sh, $sa; var $tx, $ty, $tw, $th, $ta; var $quality; var $mode; var $errors; var $gc_threshold; var $caching; function MediaResize($uVars) { define('BASE_PATH', dirname(realpath($_SERVER['SCRIPT_FILENAME']))); define('BASE_URI', dirname($_SERVER['REQUEST_URI'])); $this->gc_threshold = 0.1; $this->source = (array_key_exists('source', $uVars)) ? $uVars['source'] : null; $this->sx = 0; $this->sy = 0; $this->tx = 0; $this->ty = 0; $this->tw = (array_key_exists('width', $uVars)) ? $uVars['width'] : null; $this->th = (array_key_exists('height', $uVars)) ? $uVars['height'] : null; $this->quality = (array_key_exists('quality', $uVars)) ? $uVars['quality'] : 80; $this->mode = (array_key_exists('mode', $uVars)) ? $uVars['mode'] : 'fit'; $this->cache_folder = (array_key_exists('cache', $uVars)) ? $uVars['cache'] : 'cache'; $this->cache_age = (array_key_exists('age', $uVars)) ? intval($uVars['age']) : 120; if(!is_file($this->source)) { $this->errors[] = 'File not found: ' . $this->source; $this->fail(404, 'The requested image could not be found: ' . $this->source); return false; } if(!is_writeable($this->cache_folder)) { $this->errors[] = 'Caching disabled - the cache folder could not be written. Try chmodding it to 766'; $this->fail(500, 'The cache folder could not be written'); return false; $this->caching = false; } else { $this->caching = true; } $this->extension = pathinfo($this->source, PATHINFO_EXTENSION); $this->getHash(); $this->cache_fn = $this->cache_folder . '/' . $this->hash . '.' . $this->extension; if(!$this->checkCache()) { $this->getFile(); $this->getDimensions(); $this->create(); } if($this->gc_threshold > rand(0,1)) { $this->garbageCollection(); } } function getHash() { $this->hash = md5(serialize($this)); } function checkCache() { if(file_exists($this->cache_fn)) { $age = time() - filectime($this->cache_fn); if($age < $this->cache_age) { $this->errors[] = 'Using file from cache: age is ' . $age; $this->mime = io::getMimeType($this->extension); $this->filesize = filesize($this->cache_fn); return true; } else { return false; } } else { return false; } } function getFile() { $data = getimagesize($this->source); $this->sw = $data[0]; $this->sh = $data[1]; $this->sa = $this->sw / $this->sh; $this->mime = io::getMimeType($this->extension); } function getDimensions() { switch($this->mode) { case 'fit': if($this->tw == null && $this->th == null) { $this->errors[] = 'Please specify either width or height (or both) when mode is fit'; return false; } elseif ($this->tw == null && $this->th != null) { $this->tw = ceil($this->th * $this->sa); } elseif ($this->tw != null && $this->th == null) { $this->th = ceil($this->tw / $this->sa); } elseif ($this->tw != null && $this->th != null) { $this->ta = $this->tw / $this->th; if($this->sa == $this->ta) { } elseif ($this->sa > $this->ta) { $this->th = $this->tw / $this->sa; } elseif ($this->sa < $this->ta) { $this->tw = $this->th * $this->sa; } } break; case 'crop': if($this->tw == null && $this->th == null) { $this->errors[] = 'Please specify either width or height (or both) when mode is fit'; return false; } $this->ta = $this->tw / $this->th; if($this->ta >= 1) { if($this->sw >= $this->sh) { $w = $this->sh * $this->ta; $d = $this->sw - $w; $this->sx = $d / 2; $this->sw = $w; } else { $h = $this->sw / $this->ta; $d = $this->sh - $h; $this->sy = $d / 2; $this->sh = $h; } } else { $this->tw = $this->th * $this->sa; } break; case 'stretch': if($this->tw == null && $this->th == null) { $this->errors[] = 'Please specify either width or height (or both) when mode is fit'; return false; } $this->ta = $this->tw / $this->th; break; } } function create() { $canvas = imagecreatetruecolor($this->tw, $this->th); switch($this->mime) { case 'image/jpeg': case 'image/jpg': $image = imagecreatefromjpeg($this->source); imagecopyresampled($canvas, $image, $this->tx, $this->ty, $this->sx, $this->sy, $this->tw, $this->th, $this->sw, $this->sh); imagejpeg($canvas, $this->cache_fn, $this->quality); break; case 'image/gif': $image = imagecreatefromgif($this->source); imagecopyresampled($canvas, $image, $this->tx, $this->ty, $this->sx, $this->sy, $this->tw, $this->th, $this->sw, $this->sh); imagegif($canvas, $this->cache_fn, $this->quality); break; case 'image/png': $this->quality = floor($this->quality / 10); $image = imagecreatefrompng($this->source); imagealphablending($canvas, FALSE); imagesavealpha($canvas, TRUE); imagecopyresampled($canvas, $image, $this->tx, $this->ty, $this->sx, $this->sy, $this->tw, $this->th, $this->sw, $this->sh); imagepng($canvas, $this->cache_fn, $this->quality); break; } imagedestroy($canvas); imagedestroy($image); $this->filesize = filesize($this->cache_fn); } function output() { http::sendHeaderExpires(0); http::sendHeaderNoCache(); http::sendHeader('Content-Type', $this->mime, true); http::sendHeader('Content-Length', $this->filesize, true); http::sendHeader('Content-Disposition', 'inline;filename=' . pathinfo($this->source, PATHINFO_BASENAME), true); @readfile($this->cache_fn); } function debug() { echo '<pre>'; print_r($this); echo '</pre>'; echo '<a href="' . $this->cache_fn . '">Open</a>'; } function fail($err, $message) { header('HTTP/1.1 ' . $err); echo($message); die(); } function garbageCollection() { $d = dir($this->cache_folder); $counter = 0; clearstatcache(); while (false !== ($entry = $d->read())) { if(is_file($entry)) { $age = time() - filectime($entry); if($age > $this->cache_age) { unlink($entry); $counter++; } } } $this->errors[] = 'Removed ' . $counter . ' files from cache'; $d->close(); } } } ?><?php
 if(Extensions::isSelected('mvc')) { class mvc { public static $controller = null; public static $controllerActual = null; public static $controllerClass = null; public static $action = null; public static $actionActual = null; public static function extension_info() { return array( 'name' => 'mvc', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string', 'http', 'i8n', 'database') ); } public static function extension_load() { $tAutoRun = intval(Config::get('/mvc/@autorun', '1')); if($tAutoRun) { Events::register('run', Events::Callback('mvc::run')); } } public static function run() { $tDefaultController = Config::get('/mvc/routing/@defaultController', 'home'); $tDefaultAction = Config::get('/mvc/routing/@defaultAction', 'index'); $tNotfoundController = Config::get('/mvc/routing/@notfoundController', 'home'); $tNotfoundAction = Config::get('/mvc/routing/@notfoundAction', 'notfound'); $tControllerUrlKey = Config::get('/mvc/routing/@controllerUrlKey', '0'); $tActionUrlKey = Config::get('/mvc/routing/@actionUrlKey', '1'); if(array_key_exists($tControllerUrlKey, $_GET) && strlen($_GET[$tControllerUrlKey]) > 0) { self::$controller = $_GET[$tControllerUrlKey]; } else { self::$controller = $tDefaultController; } if(array_key_exists($tActionUrlKey, $_GET) && strlen($_GET[$tActionUrlKey]) > 0) { self::$action = $_GET[$tActionUrlKey]; } else { self::$action = $tDefaultAction; } self::$controllerActual = self::$controller; if(count($_POST) > 0 && method_exists(self::$controller, self::$action . '_post')) { self::$actionActual = self::$action . '_post'; } else { self::$actionActual = self::$action; } Events::invoke('routing', array( 'controller' => &self::$controller, 'action' => &self::$action, 'controllerActual' => &self::$controllerActual, 'actionActual' => &self::$actionActual )); try { $tReflectionMethod = new ReflectionMethod(self::$controllerActual, self::$actionActual); if(!$tReflectionMethod->isPublic()) { self::$controllerActual = $tNotfoundController; self::$actionActual = $tNotfoundAction; } } catch(ReflectionException $ex) { self::$controllerActual = $tNotfoundController; self::$actionActual = $tNotfoundAction; } self::$controllerClass = new self::$controllerActual (); self::$controllerClass->{self::$actionActual}(); return false; } public static function loadmodel($uModelClass) { return new $uModelClass (null); } public static function loadview() { $tViewNamePattern = Config::get('/mvc/view/@namePattern', '{@controller}_{@action}_{@device}_{@language}{@extension}'); $tViewDefaultExtension = Config::get('/mvc/view/@defaultExtension', QEXT_PHP); $uArgs = func_get_args(); $uModel = isset($uArgs[0]) ? $uArgs[0] : null; if(count($uArgs) == 2) { $tViewFile = $uArgs[1]; $tViewExtension = '.' . pathinfo($tViewFile, PATHINFO_EXTENSION); } else { $tViewParameters = array( 'controller' => isset($uArgs[1]) ? $uArgs[1] : mvc::$controller, 'action' => isset($uArgs[2]) ? $uArgs[2] : mvc::$action, 'device' => isset($uArgs[3]) ? $uArgs[3] : http::$crawlerType, 'language' => isset($uArgs[4]) ? $uArgs[4] : i8n::$languageKey, 'extension' => isset($uArgs[5]) ? $uArgs[5] : $tViewDefaultExtension ); $tViewFile = string::format($tViewNamePattern, $tViewParameters); $tViewExtension = $tViewParameters['extension']; } $tExtra = array( 'root' => Framework::$siteroot, 'lang' => i8n::$languageKey ); Events::invoke('renderview', array( 'viewFile' => &$tViewFile, 'viewExtension' => &$tViewExtension, 'model' => &$uModel, 'extra' => &$tExtra )); } } abstract class Model { public $controller; public function __construct($uController = null) { $this->controller = &$uController; $this->db = new DatabaseQuery(database::get()); } public function loaddatabase($uDatabaseName, $uMemberName = null) { if(is_null($uMemberName)) { $uMemberName = $uDatabaseName; } $this->{$uMemberName} = new DatabaseQuery(database::get($uDatabaseName)); } } abstract class Controller { public $defaultView; public function loadmodel($uModelClass, $uMemberName = null) { if(is_null($uMemberName)) { $uMemberName = $uModelClass; } $this->{$uMemberName} = new $uModelClass ($this); } public function loadview() { $uArgs = func_get_args(); switch(count($uArgs)) { case 0: $uArgs[] = null; $uArgs[] = $this->defaultView; break; case 1: $uArgs[] = $this->defaultView; break; } call_user_func_array('mvc::loadview', $uArgs); } public function error($uMessage) { $tViewbag = array( 'title' => 'Error', 'message' => $uMessage ); call_user_func('mvc::loadview', $tViewbag, 'shared_error.cshtml'); exit(1); } public function end() { exit(0); } } } ?>
<?php
 if(Extensions::isSelected('output')) { class output { public static $effectList = array(); public static function extension_info() { return array( 'name' => 'output', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { } public static function begin() { ob_start('output::flushOutput'); ob_implicit_flush(false); $tArgs = func_get_args(); array_push(self::$effectList, $tArgs); } public static function &end($uFlush = true) { $tContent = ob_get_contents(); ob_end_flush(); foreach(array_pop(self::$effectList) as $tEffect) { $tContent = call_user_func($tEffect, $tContent); } if($uFlush) { echo $tContent; } return $tContent; } public static function flushOutput($uContent) { return ''; } } } ?>
<?php
 if(Extensions::isSelected('repository')) { class repository { public static $packageKey = null; public static $packages = array(); public static function extension_info() { return array( 'name' => 'repository', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('io') ); } public static function extension_load() { Events::register('run', Events::Callback('repository::run')); foreach(Config::get('/repository/packageList', array()) as $tPackage) { self::$packages[$tPackage['@name']] = array(); foreach($tPackage['fileList'] as &$tFile) { self::$packages[$tPackage['@name']][] = Framework::translatePath($tFile['@path']); } } } public static function run() { $tCheckUrlKey = Config::get('/repository/routing/@repositoryCheckUrlKey', 'rep'); $tCheckUrlValue = Config::get('/repository/routing/@repositoryCheckUrlValue', ''); $tPackageUrlKey = Config::get('/repository/routing/@repositoryPackageUrlKey', $tCheckUrlKey); if(array_key_exists($tCheckUrlKey, $_GET)) { if(strlen($tCheckUrlValue) == 0) { self::$packageKey = $_GET[$tPackageUrlKey]; } else if($_GET[$tCheckUrlKey] == $tCheckUrlValue) { self::$packageKey = $_GET[$tPackageUrlKey]; } } if(isset(self::$packageKey)) { if(array_key_exists(self::$packageKey, self::$packages)) { $tMimetype = io::getMimeType('phps'); header('Content-Type: ' . $tMimetype, true); Framework::printFiles(self::$packages[self::$packageKey]); return false; } else { throw new Exception('package not found.'); } } } } } ?>
<?php
 if(Extensions::isSelected('session')) { class session { public static $id = null; public static $data = null; public static $flashdata_loaded = null; public static $flashdata_next = array(); public static $sessionName; public static $sessionLife; public static $isModified = false; public static $keyphase = null; public static $directory; public static function extension_info() { return array( 'name' => 'session', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('io', 'http') ); } public static function extension_load() { self::$sessionName = Config::get('/session/cookie/@name', 'sessid'); self::$sessionLife = intval(Config::get('/session/cookie/@life', '0')); self::$keyphase = Config::get('/session/cookie/@keyphase', null); if(array_key_exists(self::$sessionName, $_COOKIE)) { self::$id = $_COOKIE[self::$sessionName]; } Events::register('output', Events::Callback('session::output')); self::$directory = QPATH_APP . 'writable/sessions/'; } public static function output() { if(self::$isModified) { self::save(); } } private static function open() { if(!is_null(self::$id)) { $tIpCheck = (bool)Config::get('/session/cookie/@ipCheck', '0'); $tUACheck = (bool)Config::get('/session/cookie/@uaCheck', '1'); $tFilename = self::$directory . self::$id; if(file_exists($tFilename)) { $tData = io::readSerialize($tFilename, self::$keyphase); if( (self::$sessionLife <= 0 || $tData['lastmod'] + self::$sessionLife >= time()) && (!$tIpCheck || $tData['ip'] == $_SERVER['REMOTE_ADDR']) && (!$tUACheck || $tData['ua'] == $_SERVER['HTTP_USER_AGENT']) ) { self::$data = $tData['data']; self::$flashdata_loaded = $tData['flashdata']; return; } } } self::$data = array(); self::$flashdata_loaded = array(); self::$isModified = false; } public static function save() { $tKeyphase = Config::get('/session/cookie/@keyphase', null); if(is_null(self::$id)) { self::$id = io::sanitize(string::generateUuid()); } $tFilename = self::$directory . self::$id; if(self::$sessionLife > 0) { $tCookieLife = time() + self::$sessionLife; } else { $tCookieLife = 0; } setcookie(self::$sessionName, self::$id, $tCookieLife, '/'); io::writeSerialize($tFilename, array( 'data' => self::$data, 'flashdata' => self::$flashdata_next, 'lastmod' => time(), 'ip' => $_SERVER['REMOTE_ADDR'], 'ua' => $_SERVER['HTTP_USER_AGENT'] ), self::$keyphase ); self::$isModified = false; } public static function destroy() { if(!is_null(self::$data)) { self::open(); } if(is_null(self::$id)) { return; } $tFilename = self::$directory . self::$id; setcookie(self::$sessionName, '', time() - 3600, '/'); if(file_exists($tFilename)) { unlink($tFilename); } self::$id = null; self::$data = null; self::$flashdata_loaded = null; self::$isModified = false; } public static function get($uKey, $uDefault = null) { if(is_null(self::$data)) { self::open(); } if(!array_key_exists($uKey, self::$data)) { return $uDefault; } return self::$data[$uKey]; } public static function set($uKey, $uValue) { if(is_null(self::$data)) { self::open(); } self::$data[$uKey] = $uValue; self::$isModified = true; } public static function remove($uKey) { if(is_null(self::$data)) { self::open(); } unset(self::$data[$uKey]); self::$isModified = true; } public static function exists($uKey) { if(is_null(self::$data)) { self::open(); } return array_key_exists($uKey, self::$data); } public static function getFlash($uKey, $uDefault = null) { if(is_null(self::$data)) { self::open(); } if(!array_key_exists($uKey, self::$flashdata_loaded)) { return $uDefault; } return self::$flashdata_loaded[$uKey]; } public static function setFlash($uKey, $uValue) { self::$flashdata_next[$uKey] = $uValue; self::$isModified = true; } public static function removeFlash($uKey, $uValue) { unset(self::$flashdata_next[$uKey]); self::$isModified = true; } public static function keepFlash($uKey, $uDefault) { if(is_null(self::$data)) { self::open(); } if(!array_key_exists($uKey, self::$flashdata_loaded)) { self::$flashdata_next[$uKey] = $uDefault; } else { self::$flashdata_next[$uKey] = self::$flashdata_loaded[$uKey]; } self::$isModified = true; } public static function existsFlash($uKey) { if(is_null(self::$data)) { self::open(); } return array_key_exists($uKey, self::$flashdata_loaded); } } } ?>
<?php
 if(Extensions::isSelected('stopwatch')) { class stopwatch { public static $markers = array(); public static function extension_info() { return array( 'name' => 'stopwatch', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function start($uName) { self::$markers[$uName] = microtime(true); } public static function stop($uName) { $tValue = self::$markers[$uName]; unset(self::$markers[$uName]); return microtime(true) - $tValue; } public static function get($uName) { return self::$markers[$uName]; } public static function set($uName, $uTime) { self::$markers[$uName] = $uTime; } } } ?>
<?php
 if(Extensions::isSelected('string')) { class string { public static function extension_info() { return array( 'name' => 'string', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function coalesce() { foreach(func_get_args() as $tValue) { if(!is_null($tValue)) { return $tValue; } } } public static function format($uString) { $uArgs = func_get_args(); array_shift($uArgs); if(count($uArgs) > 0 && is_array($uArgs[0])) { $uArgs = $uArgs[0]; } $tBrackets = array(array(null, '')); $tQuoteChar = false; $tLastItem = 0; $tArrayItem = 1; for($tPos = 0, $tLen = strlen($uString);$tPos < $tLen;$tPos++) { if($uString[$tPos] == '\\') { $tBrackets[$tLastItem][$tArrayItem] .= $uString[++$tPos]; continue; } if($tQuoteChar === false && $uString[$tPos] == '{') { $tLastItem++; $tBrackets[$tLastItem] = array(null, null); $tArrayItem = 1; continue; } if($tLastItem > 0) { if(is_null($tBrackets[$tLastItem][$tArrayItem])) { if($uString[$tPos] == '\'' || $uString[$tPos] == '"') { $tQuoteChar = $uString[$tPos]; $tBrackets[$tLastItem][$tArrayItem] = '"'; $tPos++; } else if($uString[$tPos] == '!') { $tBrackets[$tLastItem][$tArrayItem] = '!'; $tPos++; } else if($uString[$tPos] == '@') { $tBrackets[$tLastItem][$tArrayItem] = '@'; $tPos++; } else { $tBrackets[$tLastItem][$tArrayItem] = '@'; } } if($tBrackets[$tLastItem][$tArrayItem][0] == '"') { if($tQuoteChar == $uString[$tPos]) { $tQuoteChar = false; continue; } if($tQuoteChar !== false) { $tBrackets[$tLastItem][$tArrayItem] .= $uString[$tPos]; continue; } if($uString[$tPos] != ',' && $uString[$tPos] != '}') { continue; } } if($tArrayItem == 1 && $uString[$tPos] == '|' && is_null($tBrackets[$tLastItem][0])) { $tBrackets[$tLastItem][0] = $tBrackets[$tLastItem][1]; $tBrackets[$tLastItem][1] = null; continue; } if($uString[$tPos] == ',') { $tBrackets[$tLastItem][++$tArrayItem] = null; continue; } if($uString[$tPos] == '}') { $tFunc = array_shift($tBrackets[$tLastItem]); foreach($tBrackets[$tLastItem] as &$tItem) { switch($tItem[0]) { case '"': $tItem = substr($tItem, 1); break; case '@': $tItem = $uArgs[substr($tItem, 1)]; break; case '!': $tItem = constant(substr($tItem, 1)); break; } } if(!is_null($tFunc)) { $tString = call_user_func_array(substr($tFunc, 1), $tBrackets[$tLastItem]); } else { $tString = implode(', ', $tBrackets[$tLastItem]); } $tArrayItem = count($tBrackets[$tLastItem - 1]) - 1; $tBrackets[$tLastItem - 1][$tArrayItem] .= $tString; unset($tBrackets[$tLastItem]); $tLastItem--; continue; } } $tBrackets[$tLastItem][$tArrayItem] .= $uString[$tPos]; } return $tBrackets[0][1]; } public static function vardump($uVariable) { $tVariable = $uVariable; $tType = gettype($tVariable); $tOut = ''; switch($tType) { case 'boolean': $tOut .= '<b>boolean</b>(' . (($tVariable) ? 'true' : 'false') . ')<br />'; break; case 'integer': case 'double': case 'string': $tOut .= '<b>' . $tType . '</b>(\'' . $tVariable . '\')<br />'; break; case 'array': case 'object': if($tType == 'object') { $tType = get_class($tVariable); $tVariable = @get_object_vars($tVariable); } $tCount = count($tVariable); $tOut .= '<b>' . $tType . '</b>(' . $tCount . ')'; if($tCount > 0) { $tOut .= ' {' . '<div style="padding: 0px 0px 0px 50px;">'; foreach($tVariable as $tKey => &$tVal) { $tOut .= '[' . $tKey . '] '; $tOut .= self::vardump($tVal); } $tOut .= '</div>}'; } $tOut .= '<br />'; break; case 'resource': $tOut .= '<b>resource</b>(\'' . get_resource_type($tVariable) . '\')<br />'; break; case 'NULL': $tOut .= '<b><i>null</i></b><br />'; break; case 'unknown type': default: $tOut .= 'unknown'; break; } return $tOut; } public static function generatePassword($uLength) { srand(microtime(true) * 1000000); static $aVowels = array('a', 'e', 'i', 'o', 'u'); static $aCons = array('b', 'c', 'd', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'r', 's', 't', 'u', 'v', 'w', 'tr', 'cr', 'br', 'fr', 'th', 'dr', 'ch', 'ph', 'wr', 'st', 'sp', 'sw', 'pr', 'sl', 'cl'); $tConsLen = count($aCons) - 1; $tVowelsLen = count($aVowels) - 1; for($tOutput = '', $tLen = strlen($tOutput);$tLen < $uLength;) { $tOutput .= $aCons[rand(0, $tConsLen)] . $aVowels[rand(0, $tVowelsLen)]; } return substr($tOutput, 0, $uLength); } public static function generateUuid() { return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x', mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0x0fff) | 0x4000, mt_rand(0, 0x3fff) | 0x8000, mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff) ); } public static function generate($uLength, $uCharset = '0123456789ABCDEF') { srand(microtime(true) * 1000000); $tCharsetLen = strlen($uCharset) - 1; for($tOutput = '', $tLen = strlen($tOutput);$tLen < $uLength;) { $tOutput .= $uCharset[rand(0, $tCharsetLen)]; } return $tOutput; } public static function encrypt($uString, $uKey) { $tResult = ''; for($i = 1, $tCount = strlen($uString); $i <= $tCount; $i++) { $tChar = substr($uString, $i - 1, 1); $tKeyChar = substr($uKey, ($i % strlen($uKey)) - 1, 1); $tResult .= chr(ord($tChar) + ord($tKeyChar)); } return $tResult; } public static function decrypt($uString, $uKey) { $tResult = ''; for($i = 1, $tCount = strlen($uString); $i <= $tCount; $i++) { $tChar = substr($uString, $i - 1, 1); $tKeyChar = substr($uKey, ($i % strlen($uKey)) - 1, 1); $tResult .= chr(ord($tChar) - ord($tKeyChar)); } return $tResult; } public static function strip($uString, $uValids) { $tOutput = ''; for($tCount = 0, $tLen = strlen($uString);$tCount < $tLen;$tCount++) { if(strpos($uValids, $uString[$tCount]) === false) { continue; } $tOutput .= $uString[$tCount]; } return $tOutput; } public static function normalize($uString) { static $sTable = array( 'Š'=>'S', 'š'=>'s', 'Ð'=>'Dj','Ž'=>'Z', 'ž'=>'z', 'À'=>'A', 'Á'=>'A', 'Â'=>'A', 'Ã'=>'A', 'Ä'=>'A', 'Å'=>'A', 'Æ'=>'A', 'Ç'=>'C', 'È'=>'E', 'É'=>'E', 'Ê'=>'E', 'Ë'=>'E', 'Ì'=>'I', 'Í'=>'I', 'Î'=>'I', 'Ï'=>'I', 'Ñ'=>'N', 'Ò'=>'O', 'Ó'=>'O', 'Ô'=>'O', 'Õ'=>'O', 'Ö'=>'O', 'Ø'=>'O', 'Ù'=>'U', 'Ú'=>'U', 'Û'=>'U', 'Ü'=>'U', 'Ý'=>'Y', 'Þ'=>'B', 'ß'=>'Ss','à'=>'a', 'á'=>'a', 'â'=>'a', 'ã'=>'a', 'ä'=>'a', 'å'=>'a', 'æ'=>'a', 'ç'=>'c', 'è'=>'e', 'é'=>'e', 'ê'=>'e', 'ë'=>'e', 'ì'=>'i', 'í'=>'i', 'î'=>'i', 'ï'=>'i', 'ð'=>'o', 'ñ'=>'n', 'ò'=>'o', 'ó'=>'o', 'ô'=>'o', 'õ'=>'o', 'ö'=>'o', 'ø'=>'o', 'ù'=>'u', 'ú'=>'u', 'û'=>'u', 'ý'=>'y', 'ý'=>'y', 'þ'=>'b', 'ÿ'=>'y', 'ƒ'=>'f', 'Ş'=>'S', 'ş'=>'s', 'İ'=>'I', 'ı'=>'i', 'Ğ'=>'G', 'ğ'=>'g', 'ü'=>'u' ); return strtr($uString, $sTable); } public static function squote($uString) { return strtr($uString, array('\\' => '\\\\', '\'' => '\\\'')); } public static function dquote($uString) { return strtr($uString, array('\\' => '\\\\', '"' => '\\"')); } public static function replaceBreaks($uString, $uBreaks = '<br />') { return strtr($uString, array("\r" => '', "\n" => $uBreaks)); } public static function cropText($uString, $uLength, $uContSign = '') { if(strlen($uString) <= $uLength) { return $uString; } return rtrim(substr($uString, 0, $uLength)) . $uContSign; } public static function encodeHtml($uString) { return strtr($uString, array('&' => '&amp;', '"' => '&quot;', '<' => '&lt;', '>' => '&gt;')); } public static function decodeHtml($uString) { return strtr($uString, array('&amp;' => '&', '&quot;' => '"', '&lt;' => '<', '&gt;' => '>')); } public static function toLower($uString) { return strtolower($uString); } public static function toUpper($uString) { return strtoupper($uString); } public static function sizeCalc($uSize, $uPrecision = 0) { static $tSize = ' KMGT'; for($tCount = 0; $uSize >= 1024; $uSize /= 1024, $tCount++); return round($uSize, $uPrecision) . ' ' . $tSize[$tCount] . 'B'; } public static function htmlHighlight($uString, $uKeyword) { if($uKeyword == '') { return $uString; } $tPosition = strpos(self::toLower($uString), self::toLower($uKeyword)); if($tPosition === false) { return $uString; } return substr($uString, 0, $tPosition) . '<span style="background-color: yellow;">' . substr($uString, $tPosition, strlen($uKeyword)) . '</span>' . substr($uString, $tPosition + strlen($uKeyword)) ; } private static function readset_gquote($uString, &$uPosition) { $tInSlash = false; $tInQuote = false; $tOutput = ''; for($tLen = strlen($uString);$uPosition <= $tLen;++$uPosition) { if(($uString[$uPosition] == '\\') && !$tInSlash) { $tInSlash = true; continue; } if($uString[$uPosition] == '"') { if(!$tInQuote) { $tInQuote = true; continue; } if(!$tInSlash) { return $tOutput; } } $tOutput .= $uString[$uPosition]; $tInSlash = false; } return $tOutput; } public static function readset($uString) { $tStart = strpos($uString, '['); $tOutput = array(); $tBuffer = ''; if($tStart === false) { return $tOutput; } for($tLen = strlen($uString);$tStart <= $tLen;++$tStart) { if($uString[$tStart] == ']') { $tOutput[] = $tBuffer; $tBuffer = ''; return $tOutput; } if($uString[$tStart] == ',') { $tOutput[] = $tBuffer; $tBuffer = ''; continue; } if($uString[$tStart] == '"') { $tBuffer = self::readset_gquote($uString, $tStart); continue; } } return $tOutput; } public static function parseQueryString($uString, $uParameters = '?&', $uKeys = '=', $uSeperator = null) { $tParsed = array(); $tStrings = array('', ''); $tStrIndex = 0; $tPos = 0; $tLen = strlen($uString); if(!is_null($uSeperator)) { for(;$tPos < $tLen;$tPos++) { if(strpos($uSeperator, $uString[$tPos]) !== false) { if(strlen($tStrings[1]) > 0) { $tParsed[] = $tStrings[1]; } $tStrings = array('', ''); continue; } if(strpos($uParameters, $uString[$tPos]) !== false) { break; } $tStrings[1] .= $uString[$tPos]; } } if(strlen($tStrings[1]) > 0) { if(strlen($tStrings[1]) > 0) { $tParsed[] = $tStrings[1]; } $tStrings = array('', ''); } for(;$tPos < $tLen;$tPos++) { if(strpos($uParameters, $uString[$tPos]) !== false) { if(strlen($tStrings[0]) > 0) { $tParsed[$tStrings[0]] = $tStrings[1]; $tStrIndex = 0; } $tStrings = array('', ''); continue; } if(strpos($uKeys, $uString[$tPos]) !== false && $tStrIndex < 1) { $tStrIndex++; continue; } $tStrings[$tStrIndex] .= $uString[$tPos]; } if(strlen($tStrings[0]) > 0) { if(strlen($tStrings[0]) > 0) { $tParsed[$tStrings[0]] = $tStrings[1]; $tStrIndex = 0; } $tStrings = array('', ''); } return $tParsed; } public static function removeAccent($uString) { $tAccented = array('À','Á','Â','Ã','Ä','Å','Æ','Ç','È','É','Ê','Ë','Ì','Í','Î','Ï','Ð','Ñ','Ò','Ó','Ô','Õ','Ö','Ø','Ù','Ú','Û','Ü','Ý','ß','à','á','â','ã','ä','å','æ','ç','è','é','ê','ë','ì','í','î','ï','ñ','ò','ó','ô','õ','ö','ø','ù','ú','û','ü','ý','ÿ','Ā','ā','Ă','ă','Ą','ą','Ć','ć','Ĉ','ĉ','Ċ','ċ','Č','č','Ď','ď','Đ','đ','Ē','ē','Ĕ','ĕ','Ė','ė','Ę','ę','Ě','ě','Ĝ','ĝ','Ğ','ğ','Ġ','ġ','Ģ','ģ','Ĥ','ĥ','Ħ','ħ','Ĩ','ĩ','Ī','ī','Ĭ','ĭ','Į','į','İ','ı','Ĳ','ĳ','Ĵ','ĵ','Ķ','ķ','Ĺ','ĺ','Ļ','ļ','Ľ','ľ','Ŀ','ŀ','Ł','ł','Ń','ń','Ņ','ņ','Ň','ň','ŉ','Ō','ō','Ŏ','ŏ','Ő','ő','Œ','œ','Ŕ','ŕ','Ŗ','ŗ','Ř','ř','Ś','ś','Ŝ','ŝ','Ş','ş','Š','š','Ţ','ţ','Ť','ť','Ŧ','ŧ','Ũ','ũ','Ū','ū','Ŭ','ŭ','Ů','ů','Ű','ű','Ų','ų','Ŵ','ŵ','Ŷ','ŷ','Ÿ','Ź','ź','Ż','ż','Ž','ž','ſ','ƒ','Ơ','ơ','Ư','ư','Ǎ','ǎ','Ǐ','ǐ','Ǒ','ǒ','Ǔ','ǔ','Ǖ','ǖ','Ǘ','ǘ','Ǚ','ǚ','Ǜ','ǜ','Ǻ','ǻ','Ǽ','ǽ','Ǿ','ǿ'); $tStraight = array('A','A','A','A','A','A','AE','C','E','E','E','E','I','I','I','I','D','N','O','O','O','O','O','O','U','U','U','U','Y','s','a','a','a','a','a','a','ae','c','e','e','e','e','i','i','i','i','n','o','o','o','o','o','o','u','u','u','u','y','y','A','a','A','a','A','a','C','c','C','c','C','c','C','c','D','d','D','d','E','e','E','e','E','e','E','e','E','e','G','g','G','g','G','g','G','g','H','h','H','h','I','i','I','i','I','i','I','i','I','i','IJ','ij','J','j','K','k','L','l','L','l','L','l','L','l','l','l','N','n','N','n','N','n','n','O','o','O','o','O','o','OE','oe','R','r','R','r','R','r','S','s','S','s','S','s','S','s','T','t','T','t','T','t','U','u','U','u','U','u','U','u','U','u','U','u','W','w','Y','y','Y','Z','z','Z','z','Z','z','s','f','O','o','U','u','A','a','I','i','O','o','U','u','U','u','U','u','U','u','U','u','A','a','AE','ae','O','o'); return str_replace($tAccented, $tStraight, $uString); } public static function slug($uString) { $uString = strtolower(trim($uString)); $uString = preg_replace('/[^a-z0-9-]/', '_', $uString); $uString = preg_replace('/-+/', '_', $uString); return $uString; } } } ?><?php
 if(Extensions::isSelected('time')) { class time { public static function extension_info() { return array( 'name' => 'time', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function gmdate($uFormat = null, $uTime = null, $uIsGMT = false) { if(!isset($uFormat)) { $uFormat = 'D, d M Y H:i:s'; } if(!isset($uTime)) { $uTime = time(); } return gmdate($uFormat, $uTime) . ($uIsGMT ? ' GMT' : ''); } public static function dostime($uTime = null) { if(!isset($uTime)) { $uTime = time(); } $tTimeArray = getdate($uTime); if($tTimeArray['year'] < 1980) { $tTimeArray['year'] = 1980; $tTimeArray['mon'] = 1; $tTimeArray['mday'] = 1; $tTimeArray['hours'] = 0; $tTimeArray['minutes'] = 0; $tTimeArray['seconds'] = 0; } return (($tTimeArray['year'] - 1980) << 25) | ($tTimeArray['mon'] << 21) | ($tTimeArray['mday'] << 16) | ($tTimeArray['hours'] << 11) | ($tTimeArray['minutes'] << 5) | ($tTimeArray['seconds'] >> 1); } public static function fromMysqlTime($uDate) { $tDate = sscanf($uDate, '%d-%d-%d %d:%d:%d'); return mktime($tDate[3], $tDate[4], $tDate[5], $tDate[1], $tDate[2], $tDate[0]); } public static function today() { return mktime(0, 0, 0, date('m'), date('d'), date('Y')); } } } ?>
<?php
 if(Extensions::isSelected('unittest')) { class unittest { public static $stack = array(); public static $report = array(); public static function extension_info() { return array( 'name' => 'unittest', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string') ); } public static function beginClass($uClass) { $tMethods = get_class_methods($uClass); $tInstance = new $uClass (); foreach($tMethods as &$tMethod) { self::begin($uClass . '->' . $tMethod . '()', array(&$tInstance, $tMethod)); } } public static function begin($uName, $uCallback) { array_push(self::$stack, array('name' => $uName, 'callback' => $uCallback)); call_user_func($uCallback); array_pop(self::$stack); } private static function addReport($uOperation, $uIsFailed) { $tScope = end(self::$stack); if(!array_key_exists($tScope['name'], self::$report)) { self::$report[$tScope['name']] = array(); } self::$report[$tScope['name']][] = array( 'operation' => $uOperation, 'failed' => $uIsFailed ); } public static function assertTrue($uCondition) { if($uCondition) { self::addReport('assertTrue', true); return; } self::addReport('assertTrue', false); } public static function assertFalse($uCondition) { if(!$uCondition) { self::addReport('assertFalse', true); return; } self::addReport('assertFalse', false); } public static function assertNull($uVariable) { if(is_null($uVariable)) { self::addReport('assertNull', true); return; } self::addReport('assertNull', false); } public static function assertNotNull($uVariable) { if(!is_null($uVariable)) { self::addReport('assertNotNull', true); return; } self::addReport('assertNotNull', false); } public static function export() { return string::vardump(self::$report); } } } ?>
<?php
 if(Extensions::isSelected('validation')) { class validation { public static $rules = array(); public static $summary = null; const IsNumeric = 1; const IsEqual = 2; const IsMinimum = 3; const IsMinimumOrEqual = 4; const IsMaximum = 5; const IsMaximumOrEqual = 6; const Length = 7; const LengthMinimum = 8; const LengthMaximum = 9; const RegExp = 10; const Custom = 0; public static function extension_info() { return array( 'name' => 'validation', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array('string') ); } public static function addRule() { $uArgs = func_get_args(); $uKey = array_shift($uArgs); if(!array_key_exists($uKey, self::$rules)) { self::$rules[$uKey] = array( $uArgs ); return; } self::$rules[$uKey][] = $uArgs; } public static function clear() { self::$rules = array(); self::$summary = null; } public static function validate($uArray) { self::$summary = array(); foreach($uArray as $tKey => &$tValue) { if(!array_key_exists($tKey, self::$rules)) { self::$summary[] = $tRule; continue; } foreach(self::$rules[$tKey] as &$tRule) { switch($tRule[0]) { case self::IsNumeric: if(!is_numeric($tRule[1])) { self::$summary[] = $tRule; } break; case self::IsEqual: for($tCount = count($tRule) - 1;$tCount > 0;$tCount--) { if($tValue == $tRule[$tCount]) { $tPasses = true; break; } } if(!isset($tPasses)) { self::$summary[] = $tRule; } break; case self::IsMinimum: if($tValue >= $tRule[1]) { self::$summary[] = $tRule; } break; case self::IsMinimumOrEqual: if($tValue > $tRule[1]) { self::$summary[] = $tRule; } break; case self::IsMaximum: if($tValue <= $tRule[1]) { self::$summary[] = $tRule; } break; case self::IsMaximumOrEqual: if($tValue < $tRule[1]) { self::$summary[] = $tRule; } break; case self::Length: if(strlen($tValue) != $tRule[1]) { self::$summary[] = $tRule; } break; case self::LengthMinimum: if(strlen($tValue) > $tRule[1]) { self::$summary[] = $tRule; } break; case self::LengthMaximum: if(strlen($tValue) < $tRule[1]) { self::$summary[] = $tRule; } break; case self::RegExp: if(!preg_match($tRule[1], $tValue)) { self::$summary[] = $tRule; } break; case self::Custom: if(!call_user_func($tRule[1], $tValue)) { self::$summary[] = $tRule; } break; } } } return (count(self::$summary) == 0); } public static function export() { return string::vardump(self::$summary); } } } ?><?php
 if(Extensions::isSelected('viewrenderer_markdown')) { class viewrenderer_markdown { public static $renderer = null; public static $extension; public static $templatePath; public static $compiledPath; public static function extension_info() { return array( 'name' => 'viewrenderer: markdown', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_markdown::renderview')); self::$extension = Config::get('/markdown/templates/@extension', '.md'); self::$templatePath = Framework::translatePath(Config::get('/markdown/templates/@templatePath', '{app}views')); self::$compiledPath = Framework::translatePath(Config::get('/markdown/templates/@compiledPath', '{app}writable/compiledViews')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } $tInputFile = self::$templatePath . '/' . $uObject['viewFile']; $tOutputFile = self::$compiledPath . '/md_' . $uObject['viewFile']; if(!file_exists($tOutputFile)) { if(is_null(self::$renderer)) { self::$renderer = new Markdown_Parser(); } $tInput = file_get_contents($tInputFile); $tOutput = self::$renderer->transform($tInput); file_put_contents($tOutputFile, $tOutput); } require($tOutputFile); } } @define( 'MARKDOWN_EMPTY_ELEMENT_SUFFIX', " />"); @define( 'MARKDOWN_TAB_WIDTH', 4 ); class Markdown_Parser { var $nested_brackets_depth = 6; var $nested_brackets_re; var $nested_url_parenthesis_depth = 4; var $nested_url_parenthesis_re; var $escape_chars = '\`*_{}[]()>#+-.!'; var $escape_chars_re; var $empty_element_suffix = MARKDOWN_EMPTY_ELEMENT_SUFFIX; var $tab_width = MARKDOWN_TAB_WIDTH; var $no_markup = false; var $no_entities = false; var $predef_urls = array(); var $predef_titles = array(); function Markdown_Parser() { $this->_initDetab(); $this->prepareItalicsAndBold(); $this->nested_brackets_re = str_repeat('(?>[^\[\]]+|\[', $this->nested_brackets_depth). str_repeat('\])*', $this->nested_brackets_depth); $this->nested_url_parenthesis_re = str_repeat('(?>[^()\s]+|\(', $this->nested_url_parenthesis_depth). str_repeat('(?>\)))*', $this->nested_url_parenthesis_depth); $this->escape_chars_re = '['.preg_quote($this->escape_chars).']'; asort($this->document_gamut); asort($this->block_gamut); asort($this->span_gamut); } var $urls = array(); var $titles = array(); var $html_hashes = array(); var $in_anchor = false; function setup() { $this->urls = $this->predef_urls; $this->titles = $this->predef_titles; $this->html_hashes = array(); $in_anchor = false; } function teardown() { $this->urls = array(); $this->titles = array(); $this->html_hashes = array(); } function transform($text) { $this->setup(); $text = preg_replace('{^\xEF\xBB\xBF|\x1A}', '', $text); $text = preg_replace('{\r\n?}', "\n", $text); $text .= "\n\n"; $text = $this->detab($text); $text = $this->hashHTMLBlocks($text); $text = preg_replace('/^[ ]+$/m', '', $text); foreach ($this->document_gamut as $method => $priority) { $text = $this->$method($text); } $this->teardown(); return $text . "\n"; } var $document_gamut = array( "stripLinkDefinitions" => 20, "runBasicBlockGamut" => 30, ); function stripLinkDefinitions($text) { $less_than_tab = $this->tab_width - 1; $text = preg_replace_callback('{
								^[ ]{0,'.$less_than_tab.'}\[(.+)\][ ]?:	# id = $1
								  [ ]*
								  \n?				# maybe *one* newline
								  [ ]*
								(?:
								  <(.+?)>			# url = $2
								|
								  (\S+?)			# url = $3
								)
								  [ ]*
								  \n?				# maybe one newline
								  [ ]*
								(?:
									(?<=\s)			# lookbehind for whitespace
									["(]
									(.*?)			# title = $4
									[")]
									[ ]*
								)?	# title is optional
								(?:\n+|\Z)
				}xm', array(&$this, '_stripLinkDefinitions_callback'), $text); return $text; } function _stripLinkDefinitions_callback($matches) { $link_id = strtolower($matches[1]); $url = $matches[2] == '' ? $matches[3] : $matches[2]; $this->urls[$link_id] = $url; $this->titles[$link_id] =& $matches[4]; return ''; } function hashHTMLBlocks($text) { if ($this->no_markup) return $text; $less_than_tab = $this->tab_width - 1; $block_tags_a_re = 'ins|del'; $block_tags_b_re = 'p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|address|'. 'script|noscript|form|fieldset|iframe|math'; $nested_tags_level = 4; $attr = '
				(?>				# optional tag attributes
				  \s			# starts with whitespace
				  (?>
					[^>"/]+		# text outside quotes
				  |
					/+(?!>)		# slash not followed by ">"
				  |
					"[^"]*"		# text inside double quotes (tolerate ">")
				  |
					\'[^\']*\'	# text inside single quotes (tolerate ">")
				  )*
				)?	
				'; $content = str_repeat('
					(?>
					  [^<]+			# content without tag
					|
					  <\2			# nested opening tag
						'.$attr.'	# attributes
						(?>
						  />
						|
						  >', $nested_tags_level). '.*?'. str_repeat('
						  </\2\s*>	# closing nested tag
						)
					  |				
						<(?!/\2\s*>	# other tags with a different name
					  )
					)*', $nested_tags_level); $content2 = str_replace('\2', '\3', $content); $text = preg_replace_callback('{(?>
				(?>
					(?<=\n\n)		# Starting after a blank line
					|				# or
					\A\n?			# the beginning of the doc
				)
				(						# save in $1

				  # Match from `\n<tag>` to `</tag>\n`, handling nested tags 
				  # in between.
						
							[ ]{0,'.$less_than_tab.'}
							<('.$block_tags_b_re.')# start tag = $2
							'.$attr.'>			# attributes followed by > and \n
							'.$content.'		# content, support nesting
							</\2>				# the matching end tag
							[ ]*				# trailing spaces/tabs
							(?=\n+|\Z)	# followed by a newline or end of document

				| # Special version for tags of group a.

							[ ]{0,'.$less_than_tab.'}
							<('.$block_tags_a_re.')# start tag = $3
							'.$attr.'>[ ]*\n	# attributes followed by >
							'.$content2.'		# content, support nesting
							</\3>				# the matching end tag
							[ ]*				# trailing spaces/tabs
							(?=\n+|\Z)	# followed by a newline or end of document
						
				| # Special case just for <hr />. It was easier to make a special 
				  # case than to make the other regex more complicated.
				
							[ ]{0,'.$less_than_tab.'}
							<(hr)				# start tag = $2
							'.$attr.'			# attributes
							/?>					# the matching end tag
							[ ]*
							(?=\n{2,}|\Z)		# followed by a blank line or end of document
				
				| # Special case for standalone HTML comments:
				
						[ ]{0,'.$less_than_tab.'}
						(?s:
							<!-- .*? -->
						)
						[ ]*
						(?=\n{2,}|\Z)		# followed by a blank line or end of document
				
				| # PHP and ASP-style processor instructions (<? and <%)
				
						[ ]{0,'.$less_than_tab.'}
						(?s:
							<([?%])			# $2
							.*?
							\2>
						)
						[ ]*
						(?=\n{2,}|\Z)		# followed by a blank line or end of document
						
				)
				)}Sxmi', array(&$this, '_hashHTMLBlocks_callback'), $text); return $text; } function _hashHTMLBlocks_callback($matches) { $text = $matches[1]; $key = $this->hashBlock($text); return "\n\n$key\n\n"; } function hashPart($text, $boundary = 'X') { $text = $this->unhash($text); static $i = 0; $key = "$boundary\x1A" . ++$i . $boundary; $this->html_hashes[$key] = $text; return $key; } function hashBlock($text) { return $this->hashPart($text, 'B'); } var $block_gamut = array( "doHeaders" => 10, "doHorizontalRules" => 20, "doLists" => 40, "doCodeBlocks" => 50, "doBlockQuotes" => 60, ); function runBlockGamut($text) { $text = $this->hashHTMLBlocks($text); return $this->runBasicBlockGamut($text); } function runBasicBlockGamut($text) { foreach ($this->block_gamut as $method => $priority) { $text = $this->$method($text); } $text = $this->formParagraphs($text); return $text; } function doHorizontalRules($text) { return preg_replace( '{
					^[ ]{0,3}	# Leading space
					([-*_])		# $1: First marker
					(?>			# Repeated marker group
						[ ]{0,2}	# Zero, one, or two spaces.
						\1			# Marker character
					){2,}		# Group repeated at least twice
					[ ]*		# Tailing spaces
					$			# End of line.
				}mx', "\n".$this->hashBlock("<hr$this->empty_element_suffix")."\n", $text); } var $span_gamut = array( "parseSpan" => -30, "doImages" => 10, "doAnchors" => 20, "doAutoLinks" => 30, "encodeAmpsAndAngles" => 40, "doItalicsAndBold" => 50, "doHardBreaks" => 60, ); function runSpanGamut($text) { foreach ($this->span_gamut as $method => $priority) { $text = $this->$method($text); } return $text; } function doHardBreaks($text) { return preg_replace_callback('/ {2,}\n/', array(&$this, '_doHardBreaks_callback'), $text); } function _doHardBreaks_callback($matches) { return $this->hashPart("<br$this->empty_element_suffix\n"); } function doAnchors($text) { if ($this->in_anchor) return $text; $this->in_anchor = true; $text = preg_replace_callback('{
				(					# wrap whole match in $1
				  \[
					('.$this->nested_brackets_re.')	# link text = $2
				  \]

				  [ ]?				# one optional space
				  (?:\n[ ]*)?		# one optional newline followed by spaces

				  \[
					(.*?)		# id = $3
				  \]
				)
				}xs', array(&$this, '_doAnchors_reference_callback'), $text); $text = preg_replace_callback('{
				(				# wrap whole match in $1
				  \[
					('.$this->nested_brackets_re.')	# link text = $2
				  \]
				  \(			# literal paren
					[ \n]*
					(?:
						<(.+?)>	# href = $3
					|
						('.$this->nested_url_parenthesis_re.')	# href = $4
					)
					[ \n]*
					(			# $5
					  ([\'"])	# quote char = $6
					  (.*?)		# Title = $7
					  \6		# matching quote
					  [ \n]*	# ignore any spaces/tabs between closing quote and )
					)?			# title is optional
				  \)
				)
				}xs', array(&$this, '_doAnchors_inline_callback'), $text); $text = preg_replace_callback('{
				(					# wrap whole match in $1
				  \[
					([^\[\]]+)		# link text = $2; can\'t contain [ or ]
				  \]
				)
				}xs', array(&$this, '_doAnchors_reference_callback'), $text); $this->in_anchor = false; return $text; } function _doAnchors_reference_callback($matches) { $whole_match = $matches[1]; $link_text = $matches[2]; $link_id =& $matches[3]; if ($link_id == "") { $link_id = $link_text; } $link_id = strtolower($link_id); $link_id = preg_replace('{[ ]?\n}', ' ', $link_id); if (isset($this->urls[$link_id])) { $url = $this->urls[$link_id]; $url = $this->encodeAttribute($url); $result = "<a href=\"$url\""; if ( isset( $this->titles[$link_id] ) ) { $title = $this->titles[$link_id]; $title = $this->encodeAttribute($title); $result .= " title=\"$title\""; } $link_text = $this->runSpanGamut($link_text); $result .= ">$link_text</a>"; $result = $this->hashPart($result); } else { $result = $whole_match; } return $result; } function _doAnchors_inline_callback($matches) { $whole_match = $matches[1]; $link_text = $this->runSpanGamut($matches[2]); $url = $matches[3] == '' ? $matches[4] : $matches[3]; $title =& $matches[7]; $url = $this->encodeAttribute($url); $result = "<a href=\"$url\""; if (isset($title)) { $title = $this->encodeAttribute($title); $result .= " title=\"$title\""; } $link_text = $this->runSpanGamut($link_text); $result .= ">$link_text</a>"; return $this->hashPart($result); } function doImages($text) { $text = preg_replace_callback('{
				(				# wrap whole match in $1
				  !\[
					('.$this->nested_brackets_re.')		# alt text = $2
				  \]

				  [ ]?				# one optional space
				  (?:\n[ ]*)?		# one optional newline followed by spaces

				  \[
					(.*?)		# id = $3
				  \]

				)
				}xs', array(&$this, '_doImages_reference_callback'), $text); $text = preg_replace_callback('{
				(				# wrap whole match in $1
				  !\[
					('.$this->nested_brackets_re.')		# alt text = $2
				  \]
				  \s?			# One optional whitespace character
				  \(			# literal paren
					[ \n]*
					(?:
						<(\S*)>	# src url = $3
					|
						('.$this->nested_url_parenthesis_re.')	# src url = $4
					)
					[ \n]*
					(			# $5
					  ([\'"])	# quote char = $6
					  (.*?)		# title = $7
					  \6		# matching quote
					  [ \n]*
					)?			# title is optional
				  \)
				)
				}xs', array(&$this, '_doImages_inline_callback'), $text); return $text; } function _doImages_reference_callback($matches) { $whole_match = $matches[1]; $alt_text = $matches[2]; $link_id = strtolower($matches[3]); if ($link_id == "") { $link_id = strtolower($alt_text); } $alt_text = $this->encodeAttribute($alt_text); if (isset($this->urls[$link_id])) { $url = $this->encodeAttribute($this->urls[$link_id]); $result = "<img src=\"$url\" alt=\"$alt_text\""; if (isset($this->titles[$link_id])) { $title = $this->titles[$link_id]; $title = $this->encodeAttribute($title); $result .= " title=\"$title\""; } $result .= $this->empty_element_suffix; $result = $this->hashPart($result); } else { $result = $whole_match; } return $result; } function _doImages_inline_callback($matches) { $whole_match = $matches[1]; $alt_text = $matches[2]; $url = $matches[3] == '' ? $matches[4] : $matches[3]; $title =& $matches[7]; $alt_text = $this->encodeAttribute($alt_text); $url = $this->encodeAttribute($url); $result = "<img src=\"$url\" alt=\"$alt_text\""; if (isset($title)) { $title = $this->encodeAttribute($title); $result .= " title=\"$title\""; } $result .= $this->empty_element_suffix; return $this->hashPart($result); } function doHeaders($text) { $text = preg_replace_callback('{ ^(.+?)[ ]*\n(=+|-+)[ ]*\n+ }mx', array(&$this, '_doHeaders_callback_setext'), $text); $text = preg_replace_callback('{
					^(\#{1,6})	# $1 = string of #\'s
					[ ]*
					(.+?)		# $2 = Header text
					[ ]*
					\#*			# optional closing #\'s (not counted)
					\n+
				}xm', array(&$this, '_doHeaders_callback_atx'), $text); return $text; } function _doHeaders_callback_setext($matches) { if ($matches[2] == '-' && preg_match('{^-(?: |$)}', $matches[1])) return $matches[0]; $level = $matches[2]{0} == '=' ? 1 : 2; $block = "<h$level>".$this->runSpanGamut($matches[1])."</h$level>"; return "\n" . $this->hashBlock($block) . "\n\n"; } function _doHeaders_callback_atx($matches) { $level = strlen($matches[1]); $block = "<h$level>".$this->runSpanGamut($matches[2])."</h$level>"; return "\n" . $this->hashBlock($block) . "\n\n"; } function doLists($text) { $less_than_tab = $this->tab_width - 1; $marker_ul_re = '[*+-]'; $marker_ol_re = '\d+[\.]'; $marker_any_re = "(?:$marker_ul_re|$marker_ol_re)"; $markers_relist = array( $marker_ul_re => $marker_ol_re, $marker_ol_re => $marker_ul_re, ); foreach ($markers_relist as $marker_re => $other_marker_re) { $whole_list_re = '
					(								# $1 = whole list
					  (								# $2
						([ ]{0,'.$less_than_tab.'})	# $3 = number of spaces
						('.$marker_re.')			# $4 = first list item marker
						[ ]+
					  )
					  (?s:.+?)
					  (								# $5
						  \z
						|
						  \n{2,}
						  (?=\S)
						  (?!						# Negative lookahead for another list item marker
							[ ]*
							'.$marker_re.'[ ]+
						  )
						|
						  (?=						# Lookahead for another kind of list
							\n
							\3						# Must have the same indentation
							'.$other_marker_re.'[ ]+
						  )
					  )
					)
				'; if ($this->list_level) { $text = preg_replace_callback('{
							^
							'.$whole_list_re.'
						}mx', array(&$this, '_doLists_callback'), $text); } else { $text = preg_replace_callback('{
							(?:(?<=\n)\n|\A\n?) # Must eat the newline
							'.$whole_list_re.'
						}mx', array(&$this, '_doLists_callback'), $text); } } return $text; } function _doLists_callback($matches) { $marker_ul_re = '[*+-]'; $marker_ol_re = '\d+[\.]'; $marker_any_re = "(?:$marker_ul_re|$marker_ol_re)"; $list = $matches[1]; $list_type = preg_match("/$marker_ul_re/", $matches[4]) ? "ul" : "ol"; $marker_any_re = ( $list_type == "ul" ? $marker_ul_re : $marker_ol_re ); $list .= "\n"; $result = $this->processListItems($list, $marker_any_re); $result = $this->hashBlock("<$list_type>\n" . $result . "</$list_type>"); return "\n". $result ."\n\n"; } var $list_level = 0; function processListItems($list_str, $marker_any_re) { $this->list_level++; $list_str = preg_replace("/\n{2,}\\z/", "\n", $list_str); $list_str = preg_replace_callback('{
				(\n)?							# leading line = $1
				(^[ ]*)							# leading whitespace = $2
				('.$marker_any_re.'				# list marker and space = $3
					(?:[ ]+|(?=\n))	# space only required if item is not empty
				)
				((?s:.*?))						# list item text   = $4
				(?:(\n+(?=\n))|\n)				# tailing blank line = $5
				(?= \n* (\z | \2 ('.$marker_any_re.') (?:[ ]+|(?=\n))))
				}xm', array(&$this, '_processListItems_callback'), $list_str); $this->list_level--; return $list_str; } function _processListItems_callback($matches) { $item = $matches[4]; $leading_line =& $matches[1]; $leading_space =& $matches[2]; $marker_space = $matches[3]; $tailing_blank_line =& $matches[5]; if ($leading_line || $tailing_blank_line || preg_match('/\n{2,}/', $item)) { $item = $leading_space . str_repeat(' ', strlen($marker_space)) . $item; $item = $this->runBlockGamut($this->outdent($item)."\n"); } else { $item = $this->doLists($this->outdent($item)); $item = preg_replace('/\n+$/', '', $item); $item = $this->runSpanGamut($item); } return "<li>" . $item . "</li>\n"; } function doCodeBlocks($text) { $text = preg_replace_callback('{
					(?:\n\n|\A\n?)
					(	            # $1 = the code block -- one or more lines, starting with a space/tab
					  (?>
						[ ]{'.$this->tab_width.'}  # Lines must start with a tab or a tab-width of spaces
						.*\n+
					  )+
					)
					((?=^[ ]{0,'.$this->tab_width.'}\S)|\Z)	# Lookahead for non-space at line-start, or end of doc
				}xm', array(&$this, '_doCodeBlocks_callback'), $text); return $text; } function _doCodeBlocks_callback($matches) { $codeblock = $matches[1]; $codeblock = $this->outdent($codeblock); $codeblock = htmlspecialchars($codeblock, ENT_NOQUOTES); $codeblock = preg_replace('/\A\n+|\n+\z/', '', $codeblock); $codeblock = "<pre><code>$codeblock\n</code></pre>"; return "\n\n".$this->hashBlock($codeblock)."\n\n"; } function makeCodeSpan($code) { $code = htmlspecialchars(trim($code), ENT_NOQUOTES); return $this->hashPart("<code>$code</code>"); } var $em_relist = array( '' => '(?:(?<!\*)\*(?!\*)|(?<!_)_(?!_))(?=\S|$)(?![\.,:;]\s)', '*' => '(?<=\S|^)(?<!\*)\*(?!\*)', '_' => '(?<=\S|^)(?<!_)_(?!_)', ); var $strong_relist = array( '' => '(?:(?<!\*)\*\*(?!\*)|(?<!_)__(?!_))(?=\S|$)(?![\.,:;]\s)', '**' => '(?<=\S|^)(?<!\*)\*\*(?!\*)', '__' => '(?<=\S|^)(?<!_)__(?!_)', ); var $em_strong_relist = array( '' => '(?:(?<!\*)\*\*\*(?!\*)|(?<!_)___(?!_))(?=\S|$)(?![\.,:;]\s)', '***' => '(?<=\S|^)(?<!\*)\*\*\*(?!\*)', '___' => '(?<=\S|^)(?<!_)___(?!_)', ); var $em_strong_prepared_relist; function prepareItalicsAndBold() { foreach ($this->em_relist as $em => $em_re) { foreach ($this->strong_relist as $strong => $strong_re) { $token_relist = array(); if (isset($this->em_strong_relist["$em$strong"])) { $token_relist[] = $this->em_strong_relist["$em$strong"]; } $token_relist[] = $em_re; $token_relist[] = $strong_re; $token_re = '{('. implode('|', $token_relist) .')}'; $this->em_strong_prepared_relist["$em$strong"] = $token_re; } } } function doItalicsAndBold($text) { $token_stack = array(''); $text_stack = array(''); $em = ''; $strong = ''; $tree_char_em = false; while (1) { $token_re = $this->em_strong_prepared_relist["$em$strong"]; $parts = preg_split($token_re, $text, 2, PREG_SPLIT_DELIM_CAPTURE); $text_stack[0] .= $parts[0]; $token =& $parts[1]; $text =& $parts[2]; if (empty($token)) { while ($token_stack[0]) { $text_stack[1] .= array_shift($token_stack); $text_stack[0] .= array_shift($text_stack); } break; } $token_len = strlen($token); if ($tree_char_em) { if ($token_len == 3) { array_shift($token_stack); $span = array_shift($text_stack); $span = $this->runSpanGamut($span); $span = "<strong><em>$span</em></strong>"; $text_stack[0] .= $this->hashPart($span); $em = ''; $strong = ''; } else { $token_stack[0] = str_repeat($token{0}, 3-$token_len); $tag = $token_len == 2 ? "strong" : "em"; $span = $text_stack[0]; $span = $this->runSpanGamut($span); $span = "<$tag>$span</$tag>"; $text_stack[0] = $this->hashPart($span); $$tag = ''; } $tree_char_em = false; } else if ($token_len == 3) { if ($em) { for ($i = 0; $i < 2; ++$i) { $shifted_token = array_shift($token_stack); $tag = strlen($shifted_token) == 2 ? "strong" : "em"; $span = array_shift($text_stack); $span = $this->runSpanGamut($span); $span = "<$tag>$span</$tag>"; $text_stack[0] .= $this->hashPart($span); $$tag = ''; } } else { $em = $token{0}; $strong = "$em$em"; array_unshift($token_stack, $token); array_unshift($text_stack, ''); $tree_char_em = true; } } else if ($token_len == 2) { if ($strong) { if (strlen($token_stack[0]) == 1) { $text_stack[1] .= array_shift($token_stack); $text_stack[0] .= array_shift($text_stack); } array_shift($token_stack); $span = array_shift($text_stack); $span = $this->runSpanGamut($span); $span = "<strong>$span</strong>"; $text_stack[0] .= $this->hashPart($span); $strong = ''; } else { array_unshift($token_stack, $token); array_unshift($text_stack, ''); $strong = $token; } } else { if ($em) { if (strlen($token_stack[0]) == 1) { array_shift($token_stack); $span = array_shift($text_stack); $span = $this->runSpanGamut($span); $span = "<em>$span</em>"; $text_stack[0] .= $this->hashPart($span); $em = ''; } else { $text_stack[0] .= $token; } } else { array_unshift($token_stack, $token); array_unshift($text_stack, ''); $em = $token; } } } return $text_stack[0]; } function doBlockQuotes($text) { $text = preg_replace_callback('/
				  (								# Wrap whole match in $1
					(?>
					  ^[ ]*>[ ]?			# ">" at the start of a line
						.+\n					# rest of the first line
					  (.+\n)*					# subsequent consecutive lines
					  \n*						# blanks
					)+
				  )
				/xm', array(&$this, '_doBlockQuotes_callback'), $text); return $text; } function _doBlockQuotes_callback($matches) { $bq = $matches[1]; $bq = preg_replace('/^[ ]*>[ ]?|^[ ]+$/m', '', $bq); $bq = $this->runBlockGamut($bq); $bq = preg_replace('/^/m', "  ", $bq); $bq = preg_replace_callback('{(\s*<pre>.+?</pre>)}sx', array(&$this, '_doBlockQuotes_callback2'), $bq); return "\n". $this->hashBlock("<blockquote>\n$bq\n</blockquote>")."\n\n"; } function _doBlockQuotes_callback2($matches) { $pre = $matches[1]; $pre = preg_replace('/^  /m', '', $pre); return $pre; } function formParagraphs($text) { $text = preg_replace('/\A\n+|\n+\z/', '', $text); $grafs = preg_split('/\n{2,}/', $text, -1, PREG_SPLIT_NO_EMPTY); foreach ($grafs as $key => $value) { if (!preg_match('/^B\x1A[0-9]+B$/', $value)) { $value = $this->runSpanGamut($value); $value = preg_replace('/^([ ]*)/', "<p>", $value); $value .= "</p>"; $grafs[$key] = $this->unhash($value); } else { $graf = $value; $block = $this->html_hashes[$graf]; $graf = $block; $grafs[$key] = $graf; } } return implode("\n\n", $grafs); } function encodeAttribute($text) { $text = $this->encodeAmpsAndAngles($text); $text = str_replace('"', '&quot;', $text); return $text; } function encodeAmpsAndAngles($text) { if ($this->no_entities) { $text = str_replace('&', '&amp;', $text); } else { $text = preg_replace('/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/', '&amp;', $text);; } $text = str_replace('<', '&lt;', $text); return $text; } function doAutoLinks($text) { $text = preg_replace_callback('{<((https?|ftp|dict):[^\'">\s]+)>}i', array(&$this, '_doAutoLinks_url_callback'), $text); $text = preg_replace_callback('{
				<
				(?:mailto:)?
				(
					(?:
						[-!#$%&\'*+/=?^_`.{|}~\w\x80-\xFF]+
					|
						".*?"
					)
					\@
					(?:
						[-a-z0-9\x80-\xFF]+(\.[-a-z0-9\x80-\xFF]+)*\.[a-z]+
					|
						\[[\d.a-fA-F:]+\]	# IPv4 & IPv6
					)
				)
				>
				}xi', array(&$this, '_doAutoLinks_email_callback'), $text); return $text; } function _doAutoLinks_url_callback($matches) { $url = $this->encodeAttribute($matches[1]); $link = "<a href=\"$url\">$url</a>"; return $this->hashPart($link); } function _doAutoLinks_email_callback($matches) { $address = $matches[1]; $link = $this->encodeEmailAddress($address); return $this->hashPart($link); } function encodeEmailAddress($addr) { $addr = "mailto:" . $addr; $chars = preg_split('/(?<!^)(?!$)/', $addr); $seed = (int)abs(crc32($addr) / strlen($addr)); foreach ($chars as $key => $char) { $ord = ord($char); if ($ord < 128) { $r = ($seed * (1 + $key)) % 100; if ($r > 90 && $char != '@') ; else if ($r < 45) $chars[$key] = '&#x'.dechex($ord).';'; else $chars[$key] = '&#'.$ord.';'; } } $addr = implode('', $chars); $text = implode('', array_slice($chars, 7)); $addr = "<a href=\"$addr\">$text</a>"; return $addr; } function parseSpan($str) { $output = ''; $span_re = '{
					(
						\\\\'.$this->escape_chars_re.'
					|
						(?<![`\\\\])
						`+						# code span marker
				'.( $this->no_markup ? '' : '
					|
						<!--    .*?     -->		# comment
					|
						<\?.*?\?> | <%.*?%>		# processing instruction
					|
						<[/!$]?[-a-zA-Z0-9:_]+	# regular tags
						(?>
							\s
							(?>[^"\'>]+|"[^"]*"|\'[^\']*\')*
						)?
						>
				').'
					)
					}xs'; while (1) { $parts = preg_split($span_re, $str, 2, PREG_SPLIT_DELIM_CAPTURE); if ($parts[0] != "") { $output .= $parts[0]; } if (isset($parts[1])) { $output .= $this->handleSpanToken($parts[1], $parts[2]); $str = $parts[2]; } else { break; } } return $output; } function handleSpanToken($token, &$str) { switch ($token{0}) { case "\\": return $this->hashPart("&#". ord($token{1}). ";"); case "`": if (preg_match('/^(.*?[^`])'.preg_quote($token).'(?!`)(.*)$/sm', $str, $matches)) { $str = $matches[2]; $codespan = $this->makeCodeSpan($matches[1]); return $this->hashPart($codespan); } return $token; default: return $this->hashPart($token); } } function outdent($text) { return preg_replace('/^(\t|[ ]{1,'.$this->tab_width.'})/m', '', $text); } var $utf8_strlen = 'mb_strlen'; function detab($text) { $text = preg_replace_callback('/^.*\t.*$/m', array(&$this, '_detab_callback'), $text); return $text; } function _detab_callback($matches) { $line = $matches[0]; $strlen = $this->utf8_strlen; $blocks = explode("\t", $line); $line = $blocks[0]; unset($blocks[0]); foreach ($blocks as $block) { $amount = $this->tab_width - $strlen($line, 'UTF-8') % $this->tab_width; $line .= str_repeat(" ", $amount) . $block; } return $line; } function _initDetab() { if (function_exists($this->utf8_strlen)) return; $this->utf8_strlen = create_function('$text', 'return preg_match_all(
				"/[\\\\x00-\\\\xBF]|[\\\\xC0-\\\\xFF][\\\\x80-\\\\xBF]*/", 
				$text, $m);'); } function unhash($text) { return preg_replace_callback('/(.)\x1A[0-9]+\1/', array(&$this, '_unhash_callback'), $text); } function _unhash_callback($matches) { return $this->html_hashes[$matches[0]]; } } } ?><?php
 if(Extensions::isSelected('viewrenderer_php')) { class viewrenderer_php { public static $extension; public static $templatePath; public static function extension_info() { return array( 'name' => 'viewrenderer: php', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_php::renderview')); self::$extension = Config::get('/php/templates/@extension', '.php'); self::$templatePath = Framework::translatePath(Config::get('/php/templates/@templatePath', '{app}views')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } $tInputFile = self::$templatePath . '/' . $uObject['viewFile']; $model = &$uObject['model']; if(is_array($model)) { extract($model, EXTR_SKIP|EXTR_REFS); } extract($uObject['extra'], EXTR_SKIP|EXTR_REFS); require($tInputFile); } } } ?><?php
 if(Extensions::isSelected('viewrenderer_phptal')) { class viewrenderer_phptal { public static $renderer = null; public static $extension; public static $templatePath; public static $compiledPath; public static function extension_info() { return array( 'name' => 'viewrenderer: phptal', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_phptal::renderview')); self::$extension = Config::get('/phptal/templates/@extension', '.zpt'); self::$templatePath = Framework::translatePath(Config::get('/phptal/templates/@templatePath', '{app}views')); self::$compiledPath = Framework::translatePath(Config::get('/phptal/templates/@compiledPath', '{app}writable/compiledViews')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } if(is_null(self::$renderer)) { $tPath = Framework::translatePath(Config::get('/phptal/installation/@path', '{core}include/3rdparty/PHPTAL')); require($tPath . '/PHPTAL.php'); self::$renderer = new PHPTAL(); } else { unset(self::$renderer); self::$renderer = new PHPTAL(); } if(is_array($uObject['model'])) { foreach($uObject['model'] as $tKey => &$tValue) { self::$renderer->set($tKey, $tValue); } } else { self::$renderer->set('model', $uObject['model']); } foreach($uObject['extra'] as $tKey => &$tValue) { self::$renderer->set($tKey, $tValue); } self::$renderer->setForceReparse(false); self::$renderer->setTemplateRepository(self::$templatePath . '/'); self::$renderer->setPhpCodeDestination(self::$compiledPath . '/'); self::$renderer->setOutputMode(PHPTAL::HTML5); self::$renderer->setEncoding('UTF-8'); self::$renderer->setTemplate($uObject['viewFile']); self::$renderer->echoExecute(); } } } ?><?php
 if(Extensions::isSelected('viewrenderer_raintpl')) { class viewrenderer_raintpl { public static $renderer = null; public static $extension; public static $templatePath; public static $compiledPath; public static function extension_info() { return array( 'name' => 'viewrenderer: raintpl', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_raintpl::renderview')); self::$extension = Config::get('/raintpl/templates/@extension', '.rain'); self::$templatePath = Framework::translatePath(Config::get('/raintpl/templates/@templatePath', '{app}views')); self::$compiledPath = Framework::translatePath(Config::get('/raintpl/templates/@compiledPath', '{app}writable/compiledViews')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } if(is_null(self::$renderer)) { $tPath = Framework::translatePath(Config::get('/raintpl/installation/@path', '{core}include/3rdparty/raintpl/inc')); require($tPath . '/rain.tpl.class.php'); raintpl::configure('base_url', null); raintpl::configure('tpl_dir', self::$templatePath . '/'); raintpl::configure('tpl_ext', self::$extension); raintpl::configure('cache_dir', self::$compiledPath . '/'); self::$renderer = new RainTPL(); } else { self::$renderer = new RainTPL(); } if(is_array($uObject['model'])) { foreach($uObject['model'] as $tKey => &$tValue) { self::$renderer->assign($tKey, $tValue); } } else { self::$renderer->assign('model', $uObject['model']); } foreach($uObject['extra'] as $tKey => &$tValue) { self::$renderer->assign($tKey, $tValue); } self::$renderer->draw($uObject['viewFile']); } } } ?><?php
 if(Extensions::isSelected('viewrenderer_razor')) { class viewrenderer_razor { public static $renderer = null; public static $extension; public static $templatePath; public static $compiledPath; public static function extension_info() { return array( 'name' => 'viewrenderer: razor', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_razor::renderview')); self::$extension = Config::get('/razor/templates/@extension', '.cshtml'); self::$templatePath = Framework::translatePath(Config::get('/razor/templates/@templatePath', '{app}views')); self::$compiledPath = Framework::translatePath(Config::get('/razor/templates/@compiledPath', '{app}writable/compiledViews')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } $tInputFile = self::$templatePath . '/' . $uObject['viewFile']; $tOutputFile = self::$compiledPath . '/rzr_' . $uObject['viewFile']; if(!file_exists($tOutputFile)) { if(is_null(self::$renderer)) { self::$renderer = new RazorViewRenderer(); } self::$renderer->generateViewFile($tInputFile, $tOutputFile); } $model = &$uObject['model']; if(is_array($model)) { extract($model, EXTR_SKIP|EXTR_REFS); } extract($uObject['extra'], EXTR_SKIP|EXTR_REFS); require($tOutputFile); } } class RazorViewRenderer { private $_input; private $_output; private $_sourceFile; public function generateViewFile($sourceFile, $viewFile) { $this->_sourceFile = $sourceFile; $this->_input = file_get_contents($sourceFile); $this->_output = "<?php /* source file: {$sourceFile} */ ?>\n"; $this->parse(0, strlen($this->_input)); file_put_contents($viewFile, $this->_output); } private function parse($beginBlock, $endBlock) { $offset = $beginBlock; while (($p = strpos($this->_input, "@", $offset)) !== false && $p < $endBlock) { if ($this->isNextToken($p, $endBlock, "@")) { $this->_output .= substr($this->_input, $offset, $p - $offset + 1); $offset = $p + 2; continue; } if ($this->isNextToken($p, $endBlock, "(")) { $end = $this->findClosingBracket($p + 1, $endBlock, "(", ")"); $this->_output .= substr($this->_input, $offset, $p - $offset); $this->generatePHPOutput($p, $end); $offset = $end + 1; continue; } if ($this->isNextToken($p, $endBlock, "{")) { $end = $this->findClosingBracket($p + 1, $endBlock, "{", "}"); $this->_output .= substr($this->_input, $offset, $p - $offset); $this->_output .= "<?php " . substr($this->_input, $p + 2, $end - $p - 2) . " ?>"; $offset = $end + 1; continue; } if ($this->isNextToken($p, $endBlock, ":")) { $statement = $this->detectStatement($p + 2, $endBlock); $end = $this->findEndStatement($p + 1 + strlen($statement), $endBlock); $this->_output .= substr($this->_input, $offset, $p - $offset); $this->generatePHPOutput($p + 1, $end, true); $offset = $end + 1; continue; } $statement = $this->detectStatement($p + 1, $endBlock); if ($statement == "foreach" || $statement == "for" || $statement == "while") { $offset = $this->processLoopStatement($p, $offset, $endBlock, $statement); } elseif ($statement == "if") { $offset = $this->processIfStatement($p, $offset, $endBlock, $statement); } else { $end = $this->findEndStatement($p + strlen($statement), $endBlock); $this->_output .= substr($this->_input, $offset, $p - $offset); $this->generatePHPOutput($p, $end); $offset = $end + 1; } } $this->_output .= substr($this->_input, $offset, $endBlock - $offset); } private function generatePHPOutput($currentPosition, $endPosition, $htmlEncode = false) { $this->_output .= "<?php echo " . ($htmlEncode ? "CHtml::encode(" : "") . substr($this->_input, $currentPosition + 1, $endPosition - $currentPosition) . ($htmlEncode ? ")" : "") . "; ?>"; } private function processLoopStatement($currentPosition, $offset, $endBlock, $statement) { if (($bracketPosition = $this->findOpenBracketAtLine($currentPosition + 1, $endBlock)) === false) { throw new RazorViewRendererException("Cannot find open bracket for '{$statement}' statement.", $this->_sourceFile, $this->getLineNumber($currentPosition)); } $this->_output .= substr($this->_input, $offset, $currentPosition - $offset); $this->_output .= "<?php " . substr($this->_input, $currentPosition + 1, $bracketPosition - $currentPosition) . " ?>"; $offset = $bracketPosition + 1; $end = $this->findClosingBracket($bracketPosition, $endBlock, "{", "}"); $this->parse($offset, $end); $this->_output .= "<?php } ?>"; return $end + 1; } private function processIfStatement($currentPosition, $offset, $endBlock, $statement) { $bracketPosition = $this->findOpenBracketAtLine($currentPosition + 1, $endBlock); if ($bracketPosition === false) { throw new RazorViewRendererException("Cannot find open bracket for '{$statement}' statement.", $this->_sourceFile, $this->getLineNumber($currentPosition)); } $this->_output .= substr($this->_input, $offset, $currentPosition - $offset); $start = $currentPosition + 1; while (true) { $this->_output .= "<?php " . substr($this->_input, $start, $bracketPosition - $start + 1) . " ?>"; $offset = $bracketPosition + 1; $end = $this->findClosingBracket($bracketPosition, $endBlock, "{", "}"); $this->parse($offset, $end); $offset = $end + 1; $bracketPosition = $this->findOpenBracketAtLine($offset, $endBlock); if ($bracketPosition === false) { $this->_output .= "<?php } ?>"; break; } $start = $end; } return $offset; } private function findOpenBracketAtLine($currentPosition, $endBlock) { $openDoubleQuotes = false; $openSingleQuotes = false; for ($p = $currentPosition; $p < $endBlock; ++$p) { if ($this->_input[$p] == "\n") { return false; } $quotesNotOpened = !$openDoubleQuotes && !$openSingleQuotes; if ($this->_input[$p] == '"') { $openDoubleQuotes = $this->getQuotesState($openDoubleQuotes, $quotesNotOpened, $p); } elseif ($this->_input[$p] == "'") { $openSingleQuotes = $this->getQuotesState($openSingleQuotes, $quotesNotOpened, $p); } elseif ($this->_input[$p] == "{" && $quotesNotOpened) { return $p; } } return false; } private function isNextToken($currentPosition, $endBlock, $token) { return $currentPosition + strlen($token) < $endBlock && substr($this->_input, $currentPosition + 1, strlen($token)) == $token; } private function isEscaped($currentPosition) { $cntBackSlashes = 0; for ($p = $currentPosition - 1; $p >= 0; --$p) { if ($this->_input[$p] != "\\") { break; } ++$cntBackSlashes; } return $cntBackSlashes % 2 == 1; } private function getQuotesState($testedQuotes, $quotesNotOpened, $currentPosition) { if ($quotesNotOpened) { return true; } return $testedQuotes && !$this->isEscaped($currentPosition) ? false: $testedQuotes; } private function findClosingBracket($openBracketPosition, $endBlock, $openBracket, $closeBracket) { $opened = 0; $openDoubleQuotes = false; $openSingleQuotes = false; for ($p = $openBracketPosition; $p < $endBlock; ++$p) { $quotesNotOpened = !$openDoubleQuotes && !$openSingleQuotes; if ($this->_input[$p] == '"') { $openDoubleQuotes = $this->getQuotesState($openDoubleQuotes, $quotesNotOpened, $p); } elseif ($this->_input[$p] == "'") { $openSingleQuotes = $this->getQuotesState($openSingleQuotes, $quotesNotOpened, $p); } elseif ($this->_input[$p] == $openBracket && $quotesNotOpened) { $opened++; } elseif ($this->_input[$p] == $closeBracket && $quotesNotOpened) { if (--$opened == 0) { return $p; } } } throw new RazorViewRendererException("Cannot find closing bracket.", $this->_sourceFile, $this->getLineNumber($openBracketPosition)); } private function findEndStatement($endPosition, $endBlock) { if ($this->isNextToken($endPosition, $endBlock, "(")) { $endPosition = $this->findClosingBracket($endPosition + 1, $endBlock, "(", ")"); $endPosition = $this->findEndStatement($endPosition, $endBlock); } elseif ($this->isNextToken($endPosition, $endBlock, "[")) { $endPosition = $this->findClosingBracket($endPosition + 1, $endBlock, "[", "]"); $endPosition = $this->findEndStatement($endPosition, $endBlock); } elseif ($this->isNextToken($endPosition, $endBlock, "->")) { $endPosition += 2; $statement = $this->detectStatement($endPosition + 1, $endBlock); $endPosition = $this->findEndStatement($endPosition + strlen($statement), $endBlock); } elseif ($this->isNextToken($endPosition, $endBlock, "::")) { $endPosition += 2; $statement = $this->detectStatement($endPosition + 1, $endBlock); $endPosition = $this->findEndStatement($endPosition + strlen($statement), $endBlock); } return $endPosition; } private function detectStatement($currentPosition, $endBlock) { $invalidCharPosition = $endBlock; for ($p = $currentPosition; $p < $invalidCharPosition; ++$p) { if ($this->_input[$p] == "$" && $p == $currentPosition) { continue; } if (preg_match('/[a-zA-Z0-9_]/', $this->_input[$p])) { continue; } $invalidCharPosition = $p; break; } if ($currentPosition == $invalidCharPosition) { throw new RazorViewRendererException("Cannot detect statement.", $this->_sourceFile, $this->getLineNumber($currentPosition)); } return substr($this->_input, $currentPosition, $invalidCharPosition - $currentPosition); } private function getLineNumber($currentPosition) { return count(explode("\n", substr($this->_input, 0, $currentPosition))); } } class RazorViewRendererException { public function __construct($message, $templateFileName, $line) { parent::__construct("Invalid view template: {$templateFileName}, at line {$line}. {$message}", null, null); } } } ?><?php
 if(Extensions::isSelected('viewrenderer_smarty')) { class viewrenderer_smarty { public static $renderer = null; public static $extension; public static $templatePath; public static $compiledPath; public static function extension_info() { return array( 'name' => 'viewrenderer: smarty', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_smarty::renderview')); self::$extension = Config::get('/smarty/templates/@extension', '.tpl'); self::$templatePath = Framework::translatePath(Config::get('/smarty/templates/@templatePath', '{app}views')); self::$compiledPath = Framework::translatePath(Config::get('/smarty/templates/@compiledPath', '{app}writable/compiledViews')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } if(is_null(self::$renderer)) { $tPath = Framework::translatePath(Config::get('/smarty/installation/@path', '{core}include/3rdparty/smarty/libs')); require($tPath . '/Smarty.class.php'); self::$renderer = new Smarty(); self::$renderer->setTemplateDir(self::$templatePath . '/'); self::$renderer->setCompileDir(self::$compiledPath . '/'); } else { self::$renderer->clearAllAssign(); } if(is_array($uObject['model'])) { foreach($uObject['model'] as $tKey => &$tValue) { self::$renderer->assignByRef($tKey, $tValue); } } else { self::$renderer->assignByRef('model', $uObject['model']); } foreach($uObject['extra'] as $tKey => &$tValue) { self::$renderer->assignByRef($tKey, $tValue); } self::$renderer->display($uObject['viewFile']); } } } ?><?php
 if(Extensions::isSelected('viewrenderer_twig')) { class viewrenderer_twig { public static $loader = null; public static $renderer = null; public static $extension; public static $templatePath; public static $compiledPath; public static function extension_info() { return array( 'name' => 'viewrenderer: twig', 'version' => '1.0.2', 'phpversion' => '5.1.0', 'phpdepends' => array(), 'fwversion' => '1.0', 'fwdepends' => array() ); } public static function extension_load() { Events::register('renderview', Events::Callback('viewrenderer_twig::renderview')); self::$extension = Config::get('/twig/templates/@extension', '.twig'); self::$templatePath = Framework::translatePath(Config::get('/twig/templates/@templatePath', '{app}views')); self::$compiledPath = Framework::translatePath(Config::get('/twig/templates/@compiledPath', '{app}writable/compiledViews')); } public static function renderview($uObject) { if($uObject['viewExtension'] != self::$extension) { return; } if(is_null(self::$renderer)) { $tPath = Framework::translatePath(Config::get('/twig/installation/@path', '{core}include/3rdparty/twig/lib/Twig')); require($tPath . '/Autoloader.php'); Twig_Autoloader::register(); self::$loader = new Twig_Loader_Filesystem(self::$templatePath); self::$renderer = new Twig_Environment(self::$loader, array( 'cache' => self::$compiledPath )); } echo self::$renderer->render($uObject['viewFile'], array_combine($uObject['model'], $uObject['extra'])); } } } ?><?php
 class docs extends Controller { public function index() { $this->loadview(null, 'docs_index.md'); } } ?><?php
 class home extends Controller { private $limit = 200; public function __construct() { session_start(); } public function login() { unset($_SESSION['logged']); $tViewbag = array( 'title' => 'Login' ); $this->loadview($tViewbag, 'home_login.cshtml'); } public function login_post() { $this->loadmodel('accountsModel', 'accounts'); if(!$this->accounts->checkLogin($_POST['name'], $_POST['password'])) { return $this->error('username/password error'); } $_SESSION['logged'] = true; http::sendRedirect($_SERVER['PHP_SELF'] . '?home/index'); } public function index() { if(!isset($_SESSION['logged'])) { return $this->login(); } $this->loadmodel('usersModel', 'users'); $tCurrentPage = $this->httpGet(2, 1, 'int'); if($tCurrentPage <= 0) { $tCurrentPage = 1; } $tTotal = $this->users->count(); $tDataSet = $this->users->get(($tCurrentPage - 1) * $this->limit, $this->limit); $tViewbag = array( 'title' => 'List of Accounts', 'link_back' => string::format('{num:0} records listed in {num:1} pages', $tTotal, ceil($tTotal / $this->limit)) ); $tViewbag['pagination'] = html::pager(array( 'total' => $tTotal, 'pagesize' => $this->limit, 'current' => $tCurrentPage, 'numlinks' => 20, 'link' => '<a href="{baseurl}?home/index/{page}" class="pagerlink">{pagetext}</a>', 'activelink' => '<span class="pagerlink_active">{pagetext}</span>', 'passivelink' => '<span class="pagerlink_passive">{pagetext}</span>', 'firstlast' => true )); $tViewbag['table'] = html::table(array( 'data' => $tDataSet, 'headers' => array( 'Profile', 'E-Mail', 'Name', 'Locale', 'Gender', 'Registered' ), 'rowFunc' => Events::Callback('home::tableRow') )); $this->loadview($tViewbag, 'home_index.cshtml'); } public function error($uMsg) { $tViewbag = array( 'title' => 'Error', 'message' => $uMsg ); $this->loadview($tViewbag, 'shared_error.cshtml'); } public function notfound() { return $this->error(string::format('404 not found! {@0}/{@1}', mvc::$controller, mvc::$action)); } public static function tableRow($uRow) { switch($uRow['Locale']) { case 'tr_TR': $tLocale = 'Turkey'; break; case 'de_DE': $tLocale = 'Germany'; break; case 'ru_RU': $tLocale = 'Russia'; break; case 'nl_NL': $tLocale = 'Netherlands'; break; case 'en_US': $tLocale = 'United States'; break; case 'en_GB': $tLocale = 'United Kingdom'; break; case 'fr_FR': $tLocale = 'France'; break; default: $tLocale = &$uRow['Locale']; break; } switch($uRow['Gender']) { case '1': $tGender = 'Female'; break; case '2': $tGender = 'Male'; break; case '0': default: $tGender = '-'; break; } $tResult = '<tr>'; if(!empty($uRow['ImgPath'])) { $tResult .= '<td><a href="https://www.facebook.com/profile.php?id=' . $uRow['facebookid'] . '"><img src="' . $uRow['ImgPath'] . '" border="0" alt="Facebook Profile" /></a></td>'; } else { $tResult .= '<td></td>'; } $tResult .= '<td><a href="mailto:' . $uRow['EMail'] . '">' . $uRow['EMail'] . '</a></td>'; $tResult .= '<td><a href="https://www.facebook.com/profile.php?id=' . $uRow['facebookid'] . '">' . $uRow['LongName'] . '</a></td>'; $tResult .= '<td>' . $tLocale . '</td>'; $tResult .= '<td>' . $tGender . '</td>'; if(!empty($uRow['RecDate'])) { $tResult .= '<td>' . date('d-m-Y H:i', $uRow['RecDate']) . '</td>'; } else { $tResult .= '<td>-</td>'; } $tResult .= '</tr>'; return $tResult; } } ?><?php
 class tests extends Controller { public function index() { contracts::check(1 == 1); $viewbag = array('deneme' => 'problem'); $this->loadview('tests_temp.cshtml', $viewbag); } public function notfound() { echo '404 not found!'; } public function phptal() { $viewbag = array('deneme' => 'testing phptal'); $this->loadview('tests_temp.zpt', $viewbag); } public function smarty() { $viewbag = array('deneme' => 'testing smarty'); $this->loadview('tests_temp.tpl', $viewbag); } public function raintpl() { $viewbag = array('deneme' => 'testing raintpl'); $this->loadview('tests_temp.rain', $viewbag); } public function twig() { $viewbag = array('deneme' => 'testing twig'); $this->loadview('tests_temp.twig', $viewbag); } public function version() { echo SCABBIA_VERSION; } public function extensions() { Extensions::dump(); } public function config() { echo '<pre>'; Config::dump(); } public function get() { echo string::vardump($_GET); } public function browser() { echo '<pre>'; echo http::getPlatform(); echo '<br />'; echo http::getCrawler(); } public function languages() { echo string::vardump(http::getLanguages()); } public function ucaser($uObject) { $uObject['content'] = strtoupper($uObject['content']); } public function output() { Events::register('output', Events::Callback('ucaser', $this)); output::begin('ucase'); echo 'output sample<br />'; output::end(); } public function mvc() { echo MVC::getController(); echo '<br />'; echo MVC::getAction(); echo '<br />'; echo $_GET[2]; } public function msec() { echo microtime(true) - QTIME_INIT; } public function database() { echo string::vardump(database::get('dbconn', 'dbs')->query('testtable')); echo string::vardump(database::get('dbconn')); } public function accounts() { $this->loadmodel('testModel'); echo $this->testModel->delete(); echo '<br />'; echo $this->testModel->insert(); echo '<br />'; echo string::vardump($this->testModel->get()); echo '<br />'; echo string::vardump($this->testModel->getRow()); echo '<br />'; echo string::vardump($this->testModel->getScalar()); echo '<br />'; } } ?><?php
 class users extends Controller { public function unsubscribe() { $tEmail = $this->httpGet(2, ''); if(empty($tEmail)) { return $this->error('user is empty'); } $this->loadmodel('usersModel', 'users'); $tResult = $this->users->unsubscribe($tEmail); $tViewbag = array( 'title' => 'Done' ); if($tResult) { $tViewbag['message'] = 'Your e-mail is unsubscribed from mailing list. You won\'t get any notification mails from now on.'; } else { $tViewbag['message'] = 'Your e-mail has already been unsubscribed from mailing list.'; } $this->loadview('shared_error.cshtml', $tViewbag); } public function image() { $tCampaign = $this->httpGet(2, ''); if(empty($tCampaign)) { return $this->error('campaign is empty'); } $tUserId = $this->httpGet(3, ''); if(empty($tUserId)) { return $this->error('user is empty'); } $this->loadmodel('usersModel', 'users'); $this->users->logCampaignView($tUserId, $tCampaign, 2); http::sendFile(QPATH_CORE . 'res/eposta.png'); } public function content() { $tCampaign = $this->httpGet(2, ''); if(empty($tCampaign)) { return $this->error('campaign is empty'); } $tUserId = $this->httpGet(3, ''); if(empty($tUserId)) { return $this->error('user is empty'); } $this->loadmodel('usersModel', 'users'); $tUser = $this->users->getSingle($tUserId); if(is_null($tUser)) { return $this->error('user is not exists'); } $this->users->logCampaignView($tUserId, $tCampaign, 1); $tViewbag = array( 'title' => $tUser['LongName'], 'longname' => $tUser['LongName'], 'email' => $tUser['EMail'], 'facebookid' => $tUser['facebookid'], 'imgpath' => $tUser['ImgPath'], 'gender' => $tUser['Gender'], 'locale' => $tUser['Locale'], 'recdate' => $tUser['RecDate'], 'campaign' => $tCampaign, 'userid' => $tUserId, 'image' => $_SERVER['PHP_SELF'] . '?users/image/' . $tCampaign . '/' . $tUserId ); $this->loadview('users_content.cshtml', $tViewbag); } public function error($uMsg) { $tViewbag = array( 'title' => 'Error', 'message' => $uMsg ); $this->loadview('shared_error.cshtml', $tViewbag); } public function notfound() { return $this->error('404 not found!'); } } ?><?php
 class accountsModel extends Model { function checkLogin($uName, $uPassword) { $tPassword = database::get('dbconn', 'getLoginPassword')->queryScalar($uName); if(!is_null($tPassword) && $tPassword == md5($uPassword)) { return true; } return false; } } ?><?php
 class testModel extends Model { function insert() { return $this->db ->setTable('users') ->addField('name', 'test3') ->insert(); } function update() { return $this->db ->setTable('users') ->setFields(array('isim' => 'eser', 'soyisim' => 'ozvataf')) ->addField('yas', '27') ->setWhere('id=1') ->andWhere('level<3') ->setLimit(1) ->update(); } function delete() { return $this->db ->setTable('users') ->setWhere('name=:name') ->addParameter(':name', 'test3') ->setLimit(1) ->delete(); } function get($uLimit, $uOffset) { return $this->db ->setTable('users') ->setLimit($uLimit) ->setOffset($uOffset) ->get(); } function count() { return $this->db->calculate('users', 'COUNT'); } function getRow() { return $this->db ->setTable('users') ->setWhere('name=\'test\'') ->getRow(); } function getScalar() { return $this->db ->setTable('users') ->setFieldsDirect(array('name')) ->setWhere('name=\'test\'') ->getScalar(); } function getDataset($uLimit, $uOffset) { $tUsers = $this->db->datasetSet('getUsers', $uOffset, $uLimit); return $tUsers; } } ?><?php
 class usersModel extends Model { function get($uOffset, $uLimit) { $tUsers = database::get('dbconn', 'getUsers')->querySet($uOffset, $uLimit); return $tUsers; } function getSingle($uUserId) { return database::get('dbconn', 'getSingleUser')->queryRow($uUserId); } function count() { $tCount = database::get('dbconn', 'getUserCount')->queryScalar(); return (int)$tCount; } function unsubscribe($uEmail) { return database::get('dbconn', 'setUserUnsubscribed')->query($uEmail); } function logCampaignView($uUserId, $uCampaign, $uOperation) { try { return database::get('dbconn', 'logCampaignView')->query($uUserId, $uCampaign, $uOperation); } catch(PDOException $ex) { return false; } } } ?><?php Extensions::load(); Framework::run(); Extensions::run(); ?>